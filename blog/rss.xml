<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>PixiEditor Blog</title>
        <link>https://pixieditor.net/blog</link>
        <description>PixiEditor Blog</description>
        <lastBuildDate>Sat, 13 Nov 2021 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[Devlog 1 v0.1.7]]></title>
            <link>https://pixieditor.net/blog/2021/11/13/devlog1</link>
            <guid>/2021/11/13/devlog1</guid>
            <pubDate>Sat, 13 Nov 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Current status of PixiEditor version v0.1.7 development.]]></description>
            <content:encoded><![CDATA[<p>Hello pixel makers, welcome to PixiEditor v0.1.7 development blog post. We have exciting news to share
about our latest version. A major rework is going on, there are lots of new features and bug fixes.</p><h1>What has been going on for the past few months</h1><p>We've decided to rework the most important part of PixiEditor, the drawing backend, from the ground up.
The rework will open a lot of doors for us, from a huge performance boost to an easier and quicker
cross-platform port. Thus the version 0.1.7 mostly has performance improvements and optimizations.
Apart from that, we are working really hard on fixing existing bugs (and trying not to create more), adding
new and exciting features, improving UI, etc.</p><h1>Port to SkiaSharp</h1><p>From the v0.1.7 on, PixiEditor will use Skia as the drawing backend. Skia is an extremely performant image processing library made by Google.
With it, we managed to increase drawing speed to the point where a pen size of 300px is actually usable.</p><p>While those are great news we are still facing some issues that are yet to be solved for a stable release.
Almost every aspect of the core code was affected, and we had to rewrite a lot of crucial components, such as
the undo system, tools, custom layer rendering, and much more.</p><p>New versus old comparison video: </p><video width="700" controls=""><source src="/videos/skia.mkv" type="video/mp4">Your browser does not support the video tag.</video><h1>New features</h1><p>PixiEditor still lacks many features, and we are adding more and more of them in each version.
The same goes for the one below.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="layer-grouping-and-hierarchy">Layer grouping and hierarchy<a class="hash-link" href="#layer-grouping-and-hierarchy" title="Direct link to heading">​</a></h2><p>This is the biggest feature coming to v0.1.7. From now on you'll be able to create layer groups and
enhance the structure of your drawings. It took us almost 4 months to implement and while it is still not perfect,
we are pretty happy with the way it works already.</p><video width="700" controls=""><source src="/videos/groups.mkv" type="video/mp4">Your browser does not support the video tag.</video><h2 class="anchor anchorWithStickyNavbar_mojV" id="reference-layer">Reference layer<a class="hash-link" href="#reference-layer" title="Direct link to heading">​</a></h2><p>Another interesting feature we implemented is the reference layer. Oftentimes while testing PixiEditor
we noticed that it would be convenient to have a full-resolution image as a background to our drawings. That was how
the reference layer came to life. With this feature you'll be able to select any image from the disk and it will fit your canvas
in a uniform size. </p><video width="700" controls=""><source src="/videos/reference-layer.mp4" type="video/mp4">Your browser does not support the video tag.</video><h2 class="anchor anchorWithStickyNavbar_mojV" id="rotate-and-flip-documentlayers">Rotate and flip document/layers<a class="hash-link" href="#rotate-and-flip-documentlayers" title="Direct link to heading">​</a></h2><p>Pretty self-explanatory. PixiEditor didn't have any rotation and flipping options, so now you'll be able
to rotate the whole document and the individual layers (currently in 90-degree increments, a custom angle option is planned for v0.2).</p><video width="700" controls=""><source src="/videos/rotate-flip.mkv" type="video/mp4">Your browser does not support the video tag.</video><h2 class="anchor anchorWithStickyNavbar_mojV" id="magic-wand-tool">Magic wand tool<a class="hash-link" href="#magic-wand-tool" title="Direct link to heading">​</a></h2><p>More tools, more selection capabilities. The magic wand tool selects an area that has the same color. Simple and effective.</p><h1>Other changes and improvements</h1><p>We replaced WPF Extended Toolkit zoombox with a custom one made to be more responsive and
user-friendly. There are a lot of new changes, and many of them are not mentioned in this post.</p><p>Numerous bugs were fixed (and a few new ones were introduced as well).</p><h1>Summary</h1><p>We are happy with the current status of PixiEditor v0.1.7, but It's still not ready. New features, a reworked core, lots of
bug fixes, new tools, and much more are waiting for the release. Stay tuned for the next posts!</p>]]></content:encoded>
            <category>pixieditor</category>
            <category>progress</category>
            <category>devlog</category>
        </item>
        <item>
            <title><![CDATA[How to write a Todo list app in 10 lines of code in pure C# [no dependencies]]]></title>
            <link>https://pixieditor.net/blog/2021/08/06/todo-csharp</link>
            <guid>/2021/08/06/todo-csharp</guid>
            <pubDate>Fri, 06 Aug 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[This tutorial shows how to write to do app in 10 lines of code in pure C#.]]></description>
            <content:encoded><![CDATA[<p>Show me the one programmer who didn't want to write its own todo list app. In this article, I'll show you how
to do that in 10 lines of code, without any external dependencies. Yes, really.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="talk-is-cheap-show-me-the-code">Talk is cheap, show me the code<a class="hash-link" href="#talk-is-cheap-show-me-the-code" title="Direct link to heading">​</a></h2><p>So, let's start with a new console app in .NET 5</p><p><img alt="New Console App" src="/assets/images/newproj-cb194198ac9198976ff52105ed7ef9bd.png" width="1348" height="943"></p><p>Let's give it a name</p><p><img alt="Todo App Name" src="/assets/images/todoname-49b165c0d4e02a0bbb0f502e0decbdc7.png" width="1349" height="934"></p><p>Now select .NET 5</p><p><img alt="Select .NET 5" src="/assets/images/dotnet5-24d8b62bd87942a76bca27c6f336b9d7.png" width="1308" height="906"></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="great-coding-time">Great! Coding time<a class="hash-link" href="#great-coding-time" title="Direct link to heading">​</a></h2><p>So, you ask me, how on earth, are you going to implement todo app in 10 lines of code?</p><p>The answer is simple, let me explain it step by step.</p><p>Let's start with defining your todo tasks.</p><div class="codeBlockContainer_I0IT language-csharp theme-code-block"><div class="codeBlockContent_wNvx csharp"><pre tabindex="0" class="prism-code language-csharp codeBlock_jd64 thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#F8F8F2"><span class="token plain">BuyMilk();</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">BakeCookies();</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">TalkToYourGrandma();</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">WatchTv();</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Code();</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>awesome, tasks defined. Now, go complete them, and after each completed task, come back to your pc and
write a method. Like that</p><div class="codeBlockContainer_I0IT language-csharp theme-code-block"><div class="codeBlockContent_wNvx csharp"><pre tabindex="0" class="prism-code language-csharp codeBlock_jd64 thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#F8F8F2"><span class="token plain">BuyMilk();</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">BakeCookies();</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">TalkToYourGrandma();</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">WatchTv();</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Code();</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">void BuyMilk() { }</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>After you complete all of your tasks, your program will compile, which means,
you have completed your todo list and app at the same time!</p><p>You can see which tasks are completed and which are not, in the real time.</p><p>Bonus points if your code editor highlights existing methods with green color, and undefined with red. </p><p>This is a final code </p><div class="codeBlockContainer_I0IT language-csharp theme-code-block"><div class="codeBlockContent_wNvx csharp"><pre tabindex="0" class="prism-code language-csharp codeBlock_jd64 thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#F8F8F2"><span class="token plain">BuyMilk();</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">BakeCookies();</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">TalkToYourGrandma();</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">WatchTv();</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Code();</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">void BuyMilk() { }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">void BakeCookies() { } ;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">void WatchTv() { }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">void TalkToYourGrandma() { }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">void Code() { }</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Thank you for coming to my TED talk.</p>]]></content:encoded>
            <category>code</category>
            <category>programming</category>
            <category>funny</category>
        </item>
        <item>
            <title><![CDATA[Dynamic bitmaps]]></title>
            <link>https://pixieditor.net/blog/2021/07/22/dynamic-bitmaps</link>
            <guid>/2021/07/22/dynamic-bitmaps</guid>
            <pubDate>Thu, 22 Jul 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Dynamic bitmap is a solution which made PixiEditor work multiple times faster, decreased RAM usage 10 times, and solved memory leak problems.  This article will explain what it is and how it works.]]></description>
            <content:encoded><![CDATA[<p>Dynamic bitmaps are a solution that made PixiEditor work multiple times faster, decreased RAM usage by about 10 times and solved memory leak problems.
This article will explain what dynamic bitmaps are and how they work.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="history">History<a class="hash-link" href="#history" title="Direct link to heading">​</a></h2><p>Dynamic bitmaps have been introduced in a very early alpha (version v0.0.3), before that the PixiEditor image system was pretty straightforward.</p><p>Mouse clicks were converted into relative canvas coordinates, and then color was applied to the pixels at a given position. It was pretty simple, however, this solution had one big downside. PixiEditor uses <a href="https://docs.microsoft.com/pl-pl/dotnet/api/system.windows.media.imaging.writeablebitmap?view=net-5.0" target="_blank" rel="noopener noreferrer">WriteableBitmap</a>
to manipulate bitmaps and working on bigger canvases using this solution yielded bad performance and huge memory consumption.</p><p>So what was the solution? Dynamic bitmaps!</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="what-is-a-dynamic-bitmap">What is a dynamic bitmap?<a class="hash-link" href="#what-is-a-dynamic-bitmap" title="Direct link to heading">​</a></h2><p>In simple words, a dynamic bitmap is a bitmap that fits the size of its content. This is crucial for the layer system.
Here is a visual representation of how it works </p><video width="650" controls=""><source src="/videos/dynamic-bitmaps.mp4" type="video/mp4"></video><h2 class="anchor anchorWithStickyNavbar_mojV" id="how-it-works">How it works<a class="hash-link" href="#how-it-works" title="Direct link to heading">​</a></h2><p>Let's start with a simple algorithm</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#F8F8F2"><span class="token plain">1. Create a new bitmap with a size of 0x0 (or of any other size, depending on your usage)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">2. When set pixel is requested (for example user clicked on canvas), do the following:</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">3. If the color is not transparent (if alpha is not 0):</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  a. If X of given coordinates is bigger than current width or Y is bigger than height, Increase size to bottom right</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  b. Else if new colored pixel X is smaller than 0 (relative to bitmap coordinates) or Y is smaller than 0, then increase the size to top left</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">4. Else If: color is transparent and coordinates already contain non-transparent pixel and after deleting them, there is a gap between content and the bitmap:</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  a. Decrease size of bitmap to fit content</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>  The process of resizing the bitmap is quite simple:</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#F8F8F2"><span class="token plain">1. Create a new bitmap with the desired size</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">2. Copy pixels from the current bitmap</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">3. Fill a new bitmap with the copied pixels at a calculated offset.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>  However, the implementation is not trivial, it requires some calculations, like extracting the border pixels, calculating offsets,
checking if a coordinate is a border pixel and more.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="how-pixieditor-does-this">How PixiEditor does this<a class="hash-link" href="#how-pixieditor-does-this" title="Direct link to heading">​</a></h2><p>   Our algorithms look like this:</p><div class="codeBlockContainer_I0IT language-csharp theme-code-block"><div class="codeBlockContent_wNvx csharp"><pre tabindex="0" class="prism-code language-csharp codeBlock_jd64 thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#F8F8F2"><span class="token plain">     public void DynamicResize(BitmapPixelChanges pixels)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">     {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         if (pixels.ChangedPixels.Count == 0)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">             return;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         ResetOffset(pixels);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         Tuple&lt;DoubleCords, bool&gt; borderData = ExtractBorderData(pixels);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         DoubleCords minMaxCords = borderData.Item1;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         int newMaxX = minMaxCords.Coords2.X - OffsetX;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         int newMaxY = minMaxCords.Coords2.Y - OffsetY;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         int newMinX = minMaxCords.Coords1.X - OffsetX;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         int newMinY = minMaxCords.Coords1.Y - OffsetY;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         if (!(pixels.WasBuiltAsSingleColored &amp;&amp; pixels.ChangedPixels.First().Value.A == 0)) //Check if all requested pixels are transparent</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">             if ((newMaxX + 1 &gt; Width &amp;&amp; Width &lt; MaxWidth) || (newMaxY + 1 &gt; Height &amp;&amp; Height &lt; MaxHeight))</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">             {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                 IncreaseSizeToBottomAndRight(newMaxX, newMaxY);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">             }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">             if ((newMinX &lt; 0 &amp;&amp; Width &lt; MaxWidth) || (newMinY &lt; 0 &amp;&amp; Height &lt; MaxHeight))</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">             {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                 IncreaseSizeToTopAndLeft(newMinX, newMinY);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">             }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         // if clip (fit bitmap to content) is requested</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         if (borderData.Item2)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">             clipRequested = true;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">     }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">     private void IncreaseSizeToBottomAndRight(int newMaxX, int newMaxY)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">     {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         if (MaxWidth - OffsetX &lt; 0 || MaxHeight - OffsetY &lt; 0)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">             return;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         newMaxX = Math.Clamp(Math.Max(newMaxX + 1, Width), 0, MaxWidth - OffsetX);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         newMaxY = Math.Clamp(Math.Max(newMaxY + 1, Height), 0, MaxHeight - OffsetY);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         ResizeCanvas(0, 0, 0, 0, newMaxX, newMaxY);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">     }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">     private void IncreaseSizeToTopAndLeft(int newMinX, int newMinY)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">     {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         newMinX = Math.Clamp(Math.Min(newMinX, Width), Math.Min(-OffsetX, OffsetX), 0);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         newMinY = Math.Clamp(Math.Min(newMinY, Height), Math.Min(-OffsetY, OffsetY), 0);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         Offset = new Thickness(</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">             Math.Clamp(OffsetX + newMinX, 0, MaxWidth),</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">             Math.Clamp(OffsetY + newMinY, 0, MaxHeight),</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">             0,</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">             0);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         int newWidth = Math.Clamp(Width - newMinX, 0, MaxWidth);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         int newHeight = Math.Clamp(Height - newMinY, 0, MaxHeight);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         int offsetX = Math.Abs(newWidth - Width);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         int offsetY = Math.Abs(newHeight - Height);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         ResizeCanvas(offsetX, offsetY, 0, 0, newWidth, newHeight);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">     }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">     private void ResizeCanvas(int offsetX, int offsetY, int offsetXSrc, int offsetYSrc, int newWidth, int newHeight)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">     {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         int iteratorHeight = Height &gt; newHeight ? newHeight : Height;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         int count = Width &gt; newWidth ? newWidth : Width;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         using (BitmapContext srcContext = LayerBitmap.GetBitmapContext(ReadWriteMode.ReadOnly))</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">             WriteableBitmap result = BitmapFactory.New(newWidth, newHeight);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">             using (BitmapContext destContext = result.GetBitmapContext())</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">             {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                 for (int line = 0; line &lt; iteratorHeight; line++)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                 {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                     int srcOff = (((offsetYSrc + line) * Width) + offsetXSrc) * SizeOfArgb;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                     int dstOff = (((offsetY + line) * newWidth) + offsetX) * SizeOfArgb;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                     BitmapContext.BlockCopy(srcContext, srcOff, destContext, dstOff, count * SizeOfArgb);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                 }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                 LayerBitmap = result;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                 Width = newWidth;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                 Height = newHeight;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">             }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">     }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">     private Tuple&lt;DoubleCords, bool&gt; ExtractBorderData(BitmapPixelChanges pixels)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">     {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         Coordinates firstCords = pixels.ChangedPixels.First().Key;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         int minX = firstCords.X;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         int minY = firstCords.Y;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         int maxX = minX;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         int maxY = minY;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         bool clipRequested = false;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         foreach (KeyValuePair&lt;Coordinates, Color&gt; pixel in pixels.ChangedPixels)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">             if (pixel.Key.X &lt; minX)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">             {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                 minX = pixel.Key.X;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">             }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">             else if (pixel.Key.X &gt; maxX)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">             {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                 maxX = pixel.Key.X;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">             }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">             if (pixel.Key.Y &lt; minY)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">             {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                 minY = pixel.Key.Y;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">             }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">             else if (pixel.Key.Y &gt; maxY)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">             {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                 maxY = pixel.Key.Y;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">             }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">             if (clipRequested == false &amp;&amp; IsBorderPixel(pixel.Key) &amp;&amp; pixel.Value.A == 0)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">             {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                 clipRequested = true;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">             }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         return new Tuple&lt;DoubleCords, bool&gt;(</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">             new DoubleCords(new Coordinates(minX, minY), new Coordinates(maxX, maxY)), clipRequested);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">     }</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">     private bool IsBorderPixel(Coordinates cords)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">     {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">         return cords.X - OffsetX == 0 || cords.Y - OffsetY == 0 || cords.X - OffsetX == Width - 1 ||</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                cords.Y - OffsetY == Height - 1;</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">     }</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>As you can see, the code is not trivial, it takes a lot of steps, our implementation also does a bit more stuff, like requesting clips
(resizing whole document to perfectly fit the content) and clamping the maximum size. </p><h2 class="anchor anchorWithStickyNavbar_mojV" id="performance">Performance<a class="hash-link" href="#performance" title="Direct link to heading">​</a></h2><p>Our implementation is very performant since we are using fast <code>BitmapContext.BlockCopy</code> to copy and paste pixels into a new bitmap.</p><p>It's almost unnoticeable in real-time, with fast mouse movement small visual jittering can be visible, but there is no delay whatsoever.
How fast dynamic bitmaps work, depends on the implementation, platform, native bitmap APIs, etc.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="other-benefits">Other benefits<a class="hash-link" href="#other-benefits" title="Direct link to heading">​</a></h2><p>The benefits described below are not directly related to the implementation, but the usage of dynamic bitmaps.</p><p>These features are way easier to create (or possible at all), thanks to perfectly fitted bitmaps:</p><ul><li>Resize and rotate border,</li><li>Clip canvas (fit document to content),</li><li>Center content relative to document or other layers,</li><li>Snapping and guides</li><li>Efficient preview layers</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="conclusion">Conclusion<a class="hash-link" href="#conclusion" title="Direct link to heading">​</a></h2><p>Dynamic bitmaps are a very useful structure, it helps to create a lot of small bitmaps, which can be easily reused.
No more unnecessary memory allocation and heavy CPU operations. If you want to learn more,
join our <a href="https://discord.gg/qSRMYmq" target="_blank" rel="noopener noreferrer">Discord</a>, we are open to discussions!</p>]]></content:encoded>
            <category>code</category>
            <category>solution</category>
        </item>
        <item>
            <title><![CDATA[Launching PixiEditor.net]]></title>
            <link>https://pixieditor.net/blog/2021/06/06/pixieditor-net-launch</link>
            <guid>/2021/06/06/pixieditor-net-launch</guid>
            <pubDate>Sun, 06 Jun 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[PixiEditor.net has launched!]]></description>
            <content:encoded><![CDATA[<p>🎉 PixiEditor.net has launched! 🎉</p><p>Our official website has finally launched! From now on, everything related to project will be posted here along with our social-medias.
You can now download PixiEditor from our website, read docs (GitHub wiki docs will be archived) and read blog posts.</p>]]></content:encoded>
            <category>pixieditornet</category>
            <category>website</category>
            <category>launch</category>
        </item>
    </channel>
</rss>