"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2023/05/30/1.1-release","metadata":{"permalink":"/blog/2023/05/30/1.1-release","source":"@site/blog/2023-05-30-1.1-release.mdx","title":"PixiEditor 1.1 Released!","description":"PixiEditor Version 1.1 release overview","date":"2023-05-30T00:00:00.000Z","formattedDate":"May 30, 2023","tags":[{"label":"pixieditor","permalink":"/blog/tags/pixieditor"},{"label":"progress","permalink":"/blog/tags/progress"},{"label":"devlog","permalink":"/blog/tags/devlog"}],"readingTime":2.945,"hasTruncateMarker":true,"authors":[{"name":"Krzysztof Krysi\u0144ski","title":"PixiEditor Creator","url":"https://github.com/flabbet","imageURL":"https://avatars.githubusercontent.com/u/25402427?s=400&v=4"}],"frontMatter":{"title":"PixiEditor 1.1 Released!","author":"Krzysztof Krysi\u0144ski","author_title":"PixiEditor Creator","author_url":"https://github.com/flabbet","author_image_url":"https://avatars.githubusercontent.com/u/25402427?s=400&v=4","tags":["pixieditor","progress","devlog"],"keywords":["devlog","pixieditor","pixel-art editor"],"description":"PixiEditor Version 1.1 release overview","image":"/img/blog-posts/1.1/cover.png"},"nextItem":{"title":"PixiEditor 1.0 Released!","permalink":"/blog/2023/02/27/1.0-release"}},"content":"import \\"./blog.css\\"\\r\\n\\r\\nHola! Cze\u015b\u0107! Hello! Finally, community driven translations are here. PixiEditor 1.1 introduces 10 new languages, and a new way to contribute to PixiEditor.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n## Localization\\r\\n\\r\\nDefinately, the most important thing that comes with new update is localization. We\'ve implemented whole new system for translations, that allows anyone to contribute to PixiEditor localization. \\r\\nWe and our community managed to fully translate PixiEditor to 10 new languages, and we\'re looking forward to add more in the future.\\r\\n\\r\\nSo which languages are included in 1.1?\\r\\n\\r\\n- Polish by [flabbet](https://github.com/flabbet)\\r\\n- German by [CPK](https://github.com/CPKreuz)\\r\\n- Russian by [Equbuxu](https://github.com/Equbuxu) and [Cwumb](https://www.youtube.com/watch?v=dQw4w9WgXcQ)\\r\\n- Spanish by Spraf\\r\\n- Portuguese by [Dystopixel](https://ln.ki/dystopixelart)\\r\\n- Chinese by [ILcp331](https://www.youtube.com/@ILcp331)\\r\\n- Ukrainian by [Alexey](https://digiology.org)\\r\\n- Czech by Chaos Runner and iiipt\\r\\n- Hungarian by [Almos](https://almos.dev/)\\r\\n- Arabic by 3bdo\\r\\n\\r\\nand more are in progress!\\r\\n\\r\\n![languages](/img/blog-posts/1.1/languages.png)\\r\\n\\r\\n### Wrong translation? Missing language?\\r\\n\\r\\nWe are open for community translations! If your language is missing or you\'ve found a mistake in existing one, don\'t hesitate do contribute!\\r\\n\\r\\nTo do so, you need to:\\r\\n- Be proficient in English and target language\\r\\n- Join our [Discord server](https://discord.gg/T37WNBYP68)\\r\\n- Go to #translator-request channel and follow instructions there\\r\\n\\r\\n## Other fun stuff\\r\\n\\r\\n### Menu icons!\\r\\n\\r\\n![menu icons](/img/blog-posts/1.1/menu-icons.png)\\r\\n\\r\\n### New palette formats\\r\\n\\r\\nWe\'ve added a bunch of new palette formats, including .png, .txt, .hex, .gpl, and import from .pixi\\r\\n\\r\\n![palette formats](/img/blog-posts/1.1/palette-formats.png)\\r\\n\\r\\n### Ability to remove recently opened files\\r\\n\\r\\n![recent files](/img/blog-posts/1.1/recent-files.png)\\r\\n\\r\\nAnd more minor improvements and bug fixes. Check out full changelog below.\\r\\n\\r\\n\\r\\n## What\'s next?\\r\\n\\r\\nOur next big milestone is V2.0, which will bring PixiEditor to our beloved pengiun and oval fruit devices, which in normal language means Linux and MacOS support.\\r\\nBut in the meantime we are going to release minor patches, improvements and bug fixes. Thing that for sure will come in following weeks is alternative right click action and customizable grid size.\\r\\n\\r\\nWe are also working on 2 mysteries, which we will reveal soon.\\r\\n\\r\\nHave fun assembling pixels!\\r\\n\\r\\n## Changelog\\r\\n\\r\\n```\\r\\nNew features:\\r\\n- Added localization support with 10 new languages (Polish, Spanish, German, Russian, Portuguese, Chinese, Ukrainian, Czech, Hungarian, Arabic)\\r\\n- Added the ability to remove recently opened files\\r\\n- Added menu item icons\\r\\n- Added a new command that opens anything available from the clipboard\\r\\n- Added fluent icons on Windows 11 for top bars\\r\\n- Added new palette formats (.png, Paint.NET .txt, .hex, .gpl, and import from .pixi)\\r\\n- Added localization debug window\\r\\n\\r\\nImprovements:\\r\\n- Added shortcut icon to Apply Transform button\\r\\n- Disallowed hiding the canvas while reference layer is outside of document bounds\\r\\n- Disallowed hiding the canvas while using color picker without refererence layer\\r\\n- Updated ComboBox UI\\r\\n- Disabled the size input on the pen toolbar when pixel perfect is enabled and set it\'s value to 1\\r\\n- Improved icons of the paste commands to make them more distinct\\r\\n- Added scrollbar to tools, so now on small screens, they will be accessible\\r\\n\\r\\nBug fixes:\\r\\n- Fixed a bug of update installer which caused it to ignore sub directories\\r\\n- Fixed not being able to change tool size using shortcuts for tools different than pen\\r\\n- Fixed default mode in brightness tool\\r\\n- Fixed the brush overlay showing the selected tool size when having pixel perfect enabled on the pen tool\\r\\n- Fixed .pixi file not being pastable by using preview image of the .pixi file\\r\\n- Fixed reference layer drag\'n\'drop\\r\\n- Fixed a bug that caused shared toolbar not to update cursor\\r\\n- Fixed bug causing Microsoft Store version to crash on Shortcut Templates\\r\\n```"},{"id":"/2023/02/27/1.0-release","metadata":{"permalink":"/blog/2023/02/27/1.0-release","source":"@site/blog/2023-02-27-1.0-release.mdx","title":"PixiEditor 1.0 Released!","description":"PixiEditor Version 1.0 release overview","date":"2023-02-27T00:00:00.000Z","formattedDate":"February 27, 2023","tags":[{"label":"pixieditor","permalink":"/blog/tags/pixieditor"},{"label":"progress","permalink":"/blog/tags/progress"},{"label":"devlog","permalink":"/blog/tags/devlog"}],"readingTime":10.9,"hasTruncateMarker":true,"authors":[{"name":"Krzysztof Krysi\u0144ski","title":"PixiEditor Creator","url":"https://github.com/flabbet","imageURL":"https://avatars.githubusercontent.com/u/25402427?s=400&v=4"}],"frontMatter":{"title":"PixiEditor 1.0 Released!","author":"Krzysztof Krysi\u0144ski","author_title":"PixiEditor Creator","author_url":"https://github.com/flabbet","author_image_url":"https://avatars.githubusercontent.com/u/25402427?s=400&v=4","tags":["pixieditor","progress","devlog"],"keywords":["devlog","pixieditor","pixel-art editor"],"description":"PixiEditor Version 1.0 release overview"},"prevItem":{"title":"PixiEditor 1.1 Released!","permalink":"/blog/2023/05/30/1.1-release"},"nextItem":{"title":"V1.0 Devlog","permalink":"/blog/2022/07/04/devlog2"}},"content":"import \\"./blog.css\\"\\r\\n\\r\\n\\r\\nHello pixel makers, finally, after years of development, PixiEditor 1.0 is released! Check out new exciting features, changes, and what\'s coming next.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n# Overview\\r\\n\\r\\nThis blog post will cover lots of things, I encourage you to read it all, but if you want, you can skip some parts using the navigation on the right.\\r\\n\\r\\n## Some history\\r\\n\\r\\nPixiEditor came a long way since 2017, yes, 2017. It\'s hard to believe it\'s been six years. Of course, the first 3 years were pretty slow in development, it was just a fun, learning-focused side project. Right now, however, it\'s something bigger. During the first year, PixiEditor was hidden from the world, only my hard drive knew the depths of pixel-assembling software, called back then \\"[Pixi](https://github.com/flabbet/Pixi)\\". \\r\\n\\r\\nIt was bad, really bad, but without it, PixiEditor 1.0 would never happen.\\r\\n\\r\\nThe first public version of rebranded Pixi was released on October 10th of 2018, and since that day, it\'s been known as PixiEditor. In 2019, very little happened, only one little update was released. Mostly because I worked on other projects and PixiEditor was just one of many I started back then. But I\'ve seen potential in it.\\r\\n\\r\\nThere are a lot of pixel-art-focused apps like Aseprite, Piskel, Pixel Studio, or Pixelorama, not to mention general-purpose raster graphics editors like Photoshop or Gimp, which can be configured to draw pixel art. The market seems crowded, doesn\'t it? Why would anyone need yet another app? The answer is...User interface and user experience.\\r\\n\\r\\nLet\'s face it, the world is ruled by proprietary software. If you ask a random person if he knows what Photoshop is, most likely, he heard about it at least once in his life. What about GIMP then? Well, I wouldn\'t be so sure.\\r\\n\\r\\nI noticed that a lot of open-source programs, even powerful ones, tend to expose their features to users in unpleasant ways, either visually or in terms of intuition. To back up my statement, here are some examples.\\r\\n\\r\\n### Blender\\r\\n\\r\\nThe extremely powerful and popular 3D app, before version 2.8, using it was a pain. Thankfully v2.8 solved that issue, but it\'s still a good example since open-source blender was released in 2002 and version 2.8 in 2019, so whooping 17 years of pretty bad UI and UX, confusing shortcuts, and navigation.\\r\\n\\r\\n![Blender 2.79](/img/blog-posts/1.0/blender-2.79.png)\\r\\n\\r\\n### Inkscape\\r\\n\\r\\nNow let\'s check out the most popular free and open-source vector graphics editor.\\r\\n\\r\\n![Inkscape](/img/blog-posts/1.0/inkscape.png)\\r\\n\\r\\nWHOAH, that\'s a lot of buttons, what do they do? I don\'t know, I just want to draw a simple line.\\r\\n\\r\\n![Straight Line Button](/img/blog-posts/1.0/StraightLine.png)\\r\\n\\r\\nOk, it is written here that this tool can create a straight line. Let\'s draw one then.\\r\\n\\r\\n<video src=\\"/img/blog-posts/1.0/where-is-my-line.mp4\\" controls width=\\"600\\"/>\\r\\n\\r\\nUh oh, where is my line? Even dragging the box around requires surgical precision. \\r\\n\\r\\nAfter 10 minutes of trying to find the answer in the official manual, online forums, and by clicking things in the app I finally found that you have to hold Shift and click on color to set stroke color.\\r\\n\\r\\n![stroke-color](/img/blog-posts/1.0/stroke-color.png)\\r\\n\\r\\nNot very intuitive for a beginner, right? After even more time, I found the fill and stroke menu, which exposes all the options the way it should\'ve in the first place. Why it doesn\'t show automatically?\\r\\nWhy top bar doesn\'t have a button to toggle it? \\r\\n\\r\\nI don\'t know.\\r\\n\\r\\n\\r\\nAll of the mentioned programs are fantastic and used by many users and I totally get why, some of them are my apps of choice too.\\r\\nBut I think, that the world needs free alternatives to paid programs, which look good, feel good, and most importantly, are easy to use. And that\'s our goal.\\r\\n\\r\\nAll great, but what about pixel-art-focused programs that are already on the market? \\r\\n\\r\\nWell, one true king at the moment, is Aseprite. Which is paid. Their pixelated UI style doesn\'t \\r\\nclick for me, but it\'s a rather subjective matter. The thing is, people who are used to \\r\\nPhotoshop, probably need to learn Aseprite UI and shortcuts for a while, since the layout is a bit different.\\r\\n\\r\\nWe tried solving this by mimicking Photoshop\'s layout, people are used to it, and finding stuff should be easy. Of course, PixiEditor has its own distinctive style, features, and QoL elements.\\r\\n\\r\\nBut let\'s check what\'s really inside PixiEditor 1.0.\\r\\n\\r\\n# What\'s new\\r\\n\\r\\nWe\'ve listed some of the new stuff in [previous devlog](/blog/2022/07/04/devlog2), however, I\'ll describe them here too.\\r\\n\\r\\n## Palette system with Lospec integration\\r\\n\\r\\nDedicated system for managing color palettes, which allows to easily access to colors with shortcuts\\r\\n1,2,3 etc. The system consists of a palette browser which is like a database for your palettes, you can quickly\\r\\naccess them, mark them as favorites, delete, rename them, etc. \\r\\n\\r\\n![Browser-screenshot](/img/blog-posts/devlog2/Palette-Browser.png)\\r\\n\\r\\nOne of the most interesting things it has is the [Lospec Palette List](https://lospec.com/palette-list) integration. What does it mean?\\r\\n\\r\\nLospec is the most popular pixel-art site with a great palette database, PixiEditor 1.0 supports their palette protocol, which allows importing palettes from their website with just one click.\\r\\n\\r\\n<video src=\\"/img/blog-posts/1.0/Palette browser.mp4\\" controls width=\\"700\\"/>\\r\\n\\r\\n## Symmetry\\r\\n\\r\\nAchieving geometrical perfection takes time. But those 2 funky lines can help you with that.\\r\\n\\r\\nIt\'s like having 4 hands drawing simultaneously.\\r\\n\\r\\n<video src=\\"/img/blog-posts/1.0/Symmetry.mp4\\" controls width=\\"700\\"/>\\r\\n\\r\\n## New selection transformation\\r\\n\\r\\nSelection now allows scaling, rotating, skewing and transforming perspective (with pivot!).\\r\\n\\r\\n<video src=\\"/img/blog-posts/1.0/Selection.mp4\\" controls width=\\"700\\"/>\\r\\n\\r\\n## Lasso tool\\r\\n\\r\\n[Yee-haw!](#new-selection-transformation)\\r\\n\\r\\n## Command Search and editable shortcuts\\r\\n\\r\\nThe whole codebase in PixiEditor 1.0 was rewritten from the ground up. And thanks to that, we\'ve built\\r\\nquite a robust command system, which allows you to easily search for stuff and rebind shortcuts.\\r\\n\\r\\n<video src=\\"/img/blog-posts/1.0/CommandManager.mp4\\" controls width=\\"700\\"/>\\r\\n\\r\\nNot only you can use it to find actions, but also to parse colors!\\r\\n\\r\\n## Layer Masks\\r\\n\\r\\nLayer masks are a great way to hide parts of a layer. And we have them now!\\r\\nBelow is a video example of how it works.\\r\\n\\r\\n<video src=\\"/img/blog-posts/1.0/Masks.mp4\\" controls width=\\"700\\"/>\\r\\n\\r\\n## Clip layers\\r\\n\\r\\nLayers are now clipable, which means you can use one layer as a mask for the other. \\r\\nLet\'s say you have a layer with a weapon, and you want to draw on top of it some patterns. Instead\\r\\nof drawing on the same layer, you can now create a new layer, clip it to the weapon layer, and without a lot\\r\\nof precision, draw on top of it.\\r\\n\\r\\n<video src=\\"/img/blog-posts/1.0/ClipToBelow.mp4\\" controls width=\\"700\\"/>\\r\\n\\r\\n## Lock layer alpha\\r\\n\\r\\nIt\'s like a clip to other layers, but it allows clipping to itself. In other words,\\r\\nif you toggle lock alpha, you won\'t be able to draw on transparent pixels on this layer.\\r\\n\\r\\n<video src=\\"/img/blog-posts/1.0/LockAlpha.mp4\\" controls width=\\"700\\"/>\\r\\n\\r\\n## Blend modes\\r\\n\\r\\nBlend modes define how colors from different layers mix together. PixiEditor 1.0 allows you to\\r\\nchange the blend mode of each layer. Simple as that.\\r\\n\\r\\n<video src=\\"/img/blog-posts/1.0/BlendModes.mp4\\" controls width=\\"700\\"/>\\r\\n\\r\\n## Other stuff\\r\\n\\r\\nThere are way more things that I didn\'t mention, but listing all of them would take \\r\\nway too much space and time. You can check detailed changelog [here](#changelog) or ultra-detailed changelog [here](https://github.com/PixiEditor/PixiEditor/compare/0.1.8.0...1.0.0.0)\\r\\n\\r\\n# What\'s next?\\r\\n\\r\\nPixiEditor doesn\'t end on 1.0, we have a lot of plans for the future. Hopefully, \\r\\nthey see the light of day. Here is a brief list of things that we want to implement.\\r\\n\\r\\n## V1.1\\r\\n\\r\\nFor 1.1 we want to add localization support starting with 4 languages out of the box \\r\\n(English, Polish, German, and Russian) and launch community translations for more.\\r\\n\\r\\n\\r\\n## V2\\r\\n\\r\\nFor 2.0 we plan to port PixiEditor to the new framework, AvaloniaUI, which\\r\\nwill allow us to run PixiEditor on platforms like Linux, macOS, and maybe the web.\\r\\nThis is an ambitious goal because it means we have to rebuild the whole UI from the scratch,\\r\\nbut it\'s worth the effort. \\r\\n\\r\\nWe don\'t have concrete plans for other features yet, but there will be something for sure! We thought about tile drawing, custom brushes,\\r\\nFX, but we\'re not yet sure. Feel free to join us on [Discord](https://discord.gg/qSRMYmq) and talk about it with us!\\r\\n\\r\\n## V3\\r\\n\\r\\nVersion 3.0 is exciting because it\'ll bring animation creation tools. It\'s one of the \\r\\nmost requested feature by our community and we want to do it well.\\r\\n\\r\\nIt\'s a far future, but we can\'t wait to show it to the world.\\r\\n\\r\\n# Steam release\\r\\n\\r\\nWe are widening our distribution line, along with Microsoft Store, itch.io, and our website,\\r\\nwe\'ve launched PixiEditor on Steam! Of course for free. You can now easily track hours\\r\\nspent in PixiEditor.\\r\\n\\r\\n<iframe src=\\"https://store.steampowered.com/widget/2218560/\\" frameborder=\\"0\\" style={{border: 0}} width=\\"646\\" height=\\"190\\"></iframe>\\r\\n\\r\\n# Tutorials\\r\\n\\r\\nWe are working on creating tutorials on how to use PixiEditor, check out our [YouTube Channel](https://www.youtube.com/@PixiEditor)\\r\\nfor more info!\\r\\n\\r\\n# Contributors\\r\\n\\r\\nI\'m extremely grateful to all people who made PixiEditor 1.0 possible. Huge shoutout to [Equbuxu](https://github.com/Equbuxu),\\r\\nwho was responsible for the whole rework of architecture, without him, this release wouldn\'t be as big as it is.\\r\\n\\r\\nOf course, as always, huge thanks to [PixiCPU](https://github.com/CPKreuz) for bringing a lot of great features.\\r\\n\\r\\nTo all dev-testers, artists, and external contributors, Thank you. Your support is invaluable\\r\\nand you are awesome.\\r\\n\\r\\n# Go draw some pixel art!\\r\\n\\r\\nThe only thing that was left to say is, good luck and have fun drawing!\\r\\n\\r\\nWe hope you\'ll like it, if you do, please consider a [donation](https://opencollective.com/pixieditor), we are an open-source\\r\\nan organization that makes all of this for free, your support can help us grow and make \\r\\neven more great stuff faster. Perhaps one day, we\'ll be able to work full-time on \\r\\nPixiEditor. Also, we\'d be grateful if you left a review on Steam or Microsoft Store,\\r\\nit means a lot to us and we hear your feedback.\\r\\n\\r\\n<a href=\\"https://opencollective.com/pixieditor/donate\\" target=\\"_blank\\">\\r\\n                        <img src=\\"https://opencollective.com/pixieditor/donate/button@2x.png?color=blue\\" style={{width: 300}}/>\\r\\n                    </a>\\r\\n\\r\\n---\\r\\n## Changelog\\r\\n\\r\\n```\\r\\n- PixiEditor is now on Steam!\\r\\n\\r\\nAdditions:\\r\\n- Complete rewrite of PixiEditor\'s architecture\\r\\n- Performance improvements for large canvases\\r\\n\\r\\n\\tCommands, shortcuts:\\r\\n- Added command search, a handy window that lets you search for any action you want to make in PixiEditor. You can access it using the searchbar on top or by pressing Ctrl+K.\\r\\n- You can set your own shortcuts now. If you are used to the ones from Aseprite, you can load the aseprite shortcut template without changing them manually.\\r\\n\\r\\n\\tSelection:\\r\\n- Improved the performance of all selection tools\\r\\n- Added a way to transform the selected area in different ways (move, rotate, stretch, shear, perspective)\\r\\n- You can now move and rotate shapes before applying them\\r\\n- Added a lasso tool\\r\\n- You can\'t draw outside selection now\\r\\n- You can now invert selection\\r\\n\\r\\n\\tLayer Manager:\\r\\n- Added a slider for layer opacity\\r\\n- Added layer blend modes\\r\\n- Added lock alpha, a feature that prevents you from drawing on the transparent portions of the layer.\\r\\n- Added layer masks\\r\\n- Added clipping to layer below\\r\\n- Groups are now called folders and they can now be empty\\r\\n\\r\\n\\tPalettes:\\r\\n- Added a palette system. You can now import palettes from lospec, save and load them from files. The palette browser has all the palettes you have in PixiEditor.\\r\\n- You can use the replace color feature of the palette to replace some color with another on the whole canvas\\r\\n\\r\\n\\tReference layer:\\r\\n- The reference layer is now saved in .pixi along with the rest of the drawing\\r\\n- You can now move the reference layer around, rotate it, and put it above or below your drawing\\r\\n\\r\\n\\tOther:\\r\\n- Added symmetry, a feature that automatically mirrors everything you draw to the other side of the canvas\\r\\n- Added percentage scaling to the export menu, along with a hint saying what percentage might be the best.\\r\\n- Added a thing that shows the currently selected color in the bottom left corner\\r\\n- You can now rotate and mirror the viewport (in a way that doesn\'t affect your drawing, it only affects how you see it in PixiEditor)\\r\\n- Added a wrench button in the top right corner which contains some useful viewport settings\\r\\n- You can now open the same file in multiple windows, and the windows will update in real time\\r\\n- The default transparent checkboard background is now less trippy\\r\\n- Added an About window with all the info about the project\\r\\n- The shape of the brush is now shown as a contour\\r\\n- Added ways to rotate and flip the canvas\\r\\n- Floodfill now takes all layers into account if you hold down Ctrl\\r\\n- Moved the \\"Copy Main Color\\" button into the color picker window. The button is used to set the fill color of a shape to be the same as the currently selected color.\\r\\n- Updated Discord rich presense preview to the new design of Discord in settings\\r\\n- The color picker tool can now pick colors from just the current layer, without taking the ones underneath into account.\\r\\n\\r\\nFixes:\\r\\n- The mouse pointer no longer lags when launching PixiEditor\\r\\n- If you had many layers and tried deleting or creating one, PixiEditor used to lag. This is now fixed.\\r\\n- Fix crash when saving a file with a filename ending in .mod\\r\\n- PixiEditor should no longer completely stop responsing during long operations, instead it should show a loading animation\\r\\n```"},{"id":"/2022/07/04/devlog2","metadata":{"permalink":"/blog/2022/07/04/devlog2","source":"@site/blog/2022-07-04-devlog2.mdx","title":"V1.0 Devlog","description":"Current status of PixiEditor version v1.0 development.","date":"2022-07-04T00:00:00.000Z","formattedDate":"July 4, 2022","tags":[{"label":"pixieditor","permalink":"/blog/tags/pixieditor"},{"label":"progress","permalink":"/blog/tags/progress"},{"label":"devlog","permalink":"/blog/tags/devlog"}],"readingTime":8.775,"hasTruncateMarker":true,"authors":[{"name":"PixiEditor Team","url":"https://pixieditor.net","imageURL":"https://avatars.githubusercontent.com/u/67740704?s=400&u=e0dd593b370184d299b30651ee58a36631e1a5ae&v=4"}],"frontMatter":{"title":"V1.0 Devlog","author":"PixiEditor Team","author_url":"https://pixieditor.net","author_image_url":"https://avatars.githubusercontent.com/u/67740704?s=400&u=e0dd593b370184d299b30651ee58a36631e1a5ae&v=4","tags":["pixieditor","progress","devlog"],"keywords":["devlog","pixieditor","pixel-art editor"],"description":"Current status of PixiEditor version v1.0 development."},"prevItem":{"title":"PixiEditor 1.0 Released!","permalink":"/blog/2023/02/27/1.0-release"},"nextItem":{"title":"\ud83c\udf89 Celebratory Drawing Contest \ud83c\udf89","permalink":"/blog/2022/05/02/drawing-contest"}},"content":"Hello pixel makers, as the time goes, PixiEditor v1.0 is closer and closer. We have some exciting \\r\\nupdates and progress to announce.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n# Current status\\r\\n\\r\\nWe are addressing most wanted features and improvements for this release, we took all of this seriously and \\r\\nrewritten core codebase from ground-up. At the moment of writing this devlog, new core is waiting to be \\r\\nintegrated into our main codebase and connected with the UI. \\r\\n\\r\\nSimultaneously we were working on 3 big features, palettes, shortcuts and search. One of them (palette system)\\r\\nis already available on development channel and you can test it yourself!\\r\\n\\r\\nLet\'s dive into the details.\\r\\n\\r\\n# Palette system\\r\\n\\r\\nPalettes are extremely important for good drawings, and up until now, we only had swatches system, which\\r\\nsimply saved colors that were used on canvas while drawing. Comparing swatches to palettes in PixiEditor 1.0\\r\\nis like trying to compare a raft with a yacht. It literally took _months_ of development time.\\r\\n\\r\\nInterested? Let\'s break things down!\\r\\n\\r\\n## Palette Viewer\\r\\n\\r\\nPalette Viewer is similar to the Swatches tab, it stores current palette and allows to manage it.\\r\\n\\r\\n![palette-viewer](/img/blog-posts/devlog2/Palette-viewer.png)\\r\\n\\r\\nWe can see a few things there. \\r\\n\\r\\nTop bar contains buttons to add colors, copy swatches into palette, open palette browser, import palette\\r\\nfrom disk and save palette.\\r\\n\\r\\nThen, there are colors! Who would\'ve guess? Click on them to select as a primary drawing color.\\r\\nYou might\'ve noticed that first 10 colors contain some numbers, from 1 to 0, they are, in fact, shortcuts.\\r\\n\\r\\nClicking 1 on keyboard will select first color as your primary, simple, yet time-saving. But don\'t worry, \\r\\nthey are more quality of life features.\\r\\n\\r\\nAt last, bottom bar, this one is a little mysterious at first glance.\\r\\nIt\'s a color replacer. Drag color to a first field, click on second to pick desired color and hit replace button.\\r\\nNot only it will replace color in palette, but also on the canvas!\\r\\n\\r\\n<video class=\\"blog-video\\" controls>\\r\\n  <source src=\\"/img/blog-posts/devlog2/Color-replacer.mp4\\" type=\\"video/mp4\\"/>\\r\\n  Your browser does not support the video tag.\\r\\n</video>\\r\\n\\r\\n## Palette Browser\\r\\n\\r\\nPalette Browser is a place, where you can find all stored palettes, from the ones you\'ve created, to the ones downloaded from the internet.\\r\\n\\r\\n![palette-browser](/img/blog-posts/devlog2/Palette-Browser.png)\\r\\n\\r\\nLookin\' good, doesn\'t it?\\r\\n\\r\\nFirst thing, you can see all palettes in the list. You can also search for palettes by name, filters and mark them as favorite. You can also import\\r\\nthem from your palette viewer, disk or ...import directly from [Lospec](https://lospec.com/palette-list) by clicking \\"Open in app\\" button.  \\r\\n\\r\\nHere is how it looks in action:\\r\\n\\r\\n<video class=\\"blog-video\\" controls>\\r\\n  <source src=\\"/img/blog-posts/devlog2/Lospec-Import.mp4\\" type=\\"video/mp4\\"/>\\r\\n  Your browser does not support the video tag.\\r\\n</video>\\r\\n\\r\\n## Other features\\r\\n\\r\\n- Context menu quick palette color picker:\\r\\n\\r\\n![context-menu](/img/blog-posts/devlog2/Context-menu.png)\\r\\n\\r\\n- Jasc palette file format support\\r\\n- CSP (Clip Studio Paint) file format support\\r\\n\\r\\n# Command Manager\\r\\n\\r\\nCommand Manager is a quality of life feature, that gives the user ability, to quickly search for different actions. Simillar to Visual Studio Code.\\r\\n\\r\\n## Search\\r\\n\\r\\nSearch lets you do everything you can do inside of PixiEditor, with just one search bar.\\r\\n\\r\\nFor example, you can quickly open any recently opened file, do most of the things you do with your mouse, but more quickly and it has some nice extra features for making you more productive.\\r\\n\\r\\nTo open it, just click on the new search bar at the top of the window or press the shortcut, which is set to Ctrl + K by default.\\r\\n\\r\\n![search-open](/img/blog-posts/devlog2/Search-open.png)\\r\\n\\r\\nThis opens up the new search bar.\\r\\n\\r\\n<img src=\\"/img/blog-posts/devlog2/Search-window.png\\" class=\\"blog-c80\\"/>\\r\\n\\r\\nIt is really powerful, and there\'s more.\\r\\n\\r\\n### Color Input\\r\\n\\r\\nYou can quickly type in colors to select them in the color picker.\\r\\n\\r\\n![search-set-hex](/img/blog-posts/devlog2/Search-set-hex.png)\\r\\n\\r\\n![search-set-rgb](/img/blog-posts/devlog2/Search-set-rgb.png)\\r\\n\\r\\n#### Pro tips:\\r\\n\\r\\n#1 Press Ctrl + R to quickly insert the rgb pattern.\\r\\n\\r\\n#2 Just press space in the rgb pattern after typing in a number to go to the next value.\\r\\n\\r\\n#3 Press Ctrl + S to switch between rgb and hex.\\r\\n\\r\\n### File Path\\r\\n\\r\\nYou can type in a path to a file to open it.\\r\\n\\r\\n![search-kenobi](/img/blog-posts/devlog2/Search-kenobi.png)\\r\\n\\r\\n#### Pro tip:\\r\\n\\r\\nAs you can see in the screenshot, by starting the path with a \'~\' you can start from your users directory.\\r\\n\\r\\n## Customizable Shortcuts\\r\\n\\r\\nYes! They\'re finally here.\\r\\n\\r\\nYou can now customize all your favorite shortcuts in a new neat section in the settings.\\r\\n\\r\\n![shortcuts-keybinds](/img/blog-posts/devlog2/Shortcuts-keybinds.png)\\r\\n\\r\\nYou can also also import all the shortcuts from your old favorite pixel art editor to your new favorite pixel art editor.\\r\\n\\r\\n![shortcuts-imports](/img/blog-posts/devlog2/Shortcuts-imports.png)\\r\\n\\r\\nCurrently, there\'s only Aseprite, but we will add more inferior editors in the future.\\r\\n\\r\\n## Rewrite of PixiEditor\'s core\\r\\n\\r\\nHey all, this section was written by [@Equbuxu](https://github.com/Equbuxu). Since around the middle of february I\'ve been working on a complete revamp of a large part of the codebase. \\r\\nAll tools, e.g. pen, selection, fill, and others were implemented from scratch, and so was the system that keeps track of everything you draw to let you \\r\\nundo and redo. For the most part this is an internal change, but it already enables us to implement various new features a lot more quickly. \\r\\n\\r\\nRight now all of these changes are in a completely separate app, which we refer to as \\"the prototype\\". The UI there is intended only for testing, so don\'t be\\r\\ntoo scared of what you\'ll see below. The prototype already has a bunch of cool features that will be coming to PixiEditor, here are some of them:\\r\\n\\r\\n### Improved layers system\\r\\n\\r\\n<video width=\\"700\\" controls>\\r\\n    <source src=\\"/img/blog-posts/devlog2/Layers.mp4\\" type=\\"video/mp4\\"/>\\r\\n    Your browser does not support the video tag.\\r\\n</video>\\r\\n\\r\\nSince I was implementing layers from scratch anyway I decided to bring in the features you are probably used to from other editors. Blend modes, layer masks, \\r\\noptions to lock layer transparency and clip to layer below are now all included! I\'ve fixed a bunch of issues of the old layers system too, like folder \\r\\nopacity not being correctly applied to layers. Oh, and groups (folders) can be empty now, they won\'t disappear.\\r\\n\\r\\n### Selection that actually works\\r\\n\\r\\nFor a long time selection in PixiEditor has been missing a ton of crucial features, it was a joke really. Trying to select anything on all but the \\r\\nsmallest of canvases was a misarable experience as the app ground to a halt. You might\'ve wanted to use the selection to mask out a specific area \\r\\nto work on, and it just didn\'t work. You could draw outside of the selection just as well as inside of it, and the fill tool acted like the \\r\\nselection doesn\'t exist at all. It wasn\'t even possible to scale and rotate the selected section of the image, the best you could do is move it around, \\r\\nand even then the app acted buggy at times.\\r\\n\\r\\nAll this changed in the prototype. Performance have been massively improved, all the big and small annoyances have been taken care of, and the system as \\r\\na whole is now compareable to what you would find in other popular drawing apps.\\r\\n\\r\\n<video width=\\"700\\" controls>\\r\\n    <source src=\\"/img/blog-posts/devlog2/Lasso-Transform.mp4\\" type=\\"video/mp4\\"/>\\r\\n    Your browser does not support the video tag.\\r\\n</video>\\r\\n\\r\\nSelecting an area with a lasso and transforming it\\r\\n\\r\\n<video width=\\"700\\" controls>\\r\\n    <source src=\\"/img/blog-posts/devlog2/Selection-Clipping.mp4\\" type=\\"video/mp4\\"/>\\r\\n    Your browser does not support the video tag.\\r\\n</video>\\r\\n\\r\\nEverything you draw stays inside selection\\r\\n\\r\\n### Separate thread\\r\\n\\r\\nAll the drawing operations are now executed in a separate thread, which means (hopefully) no more \\"not responding\\" dialog boxes. At the very least, if you see one now \\r\\nit means something really went wrong, and it\'s not the selection system taking it\'s time to draw some translucent blue rectangles. Also the mouse cursor won\'t lag \\r\\ntogether with the app anymore.\\r\\n\\r\\n### Viewport improvements\\r\\n\\r\\nYou\'ll now be able to rotate and flip the viewport. \\r\\n\\r\\n<video width=\\"700\\" controls>\\r\\n    <source src=\\"/img/blog-posts/devlog2/Move-Viewport.mp4\\" type=\\"video/mp4\\"/>\\r\\n    Your browser does not support the video tag.\\r\\n</video>\\r\\n\\r\\n### Chunk system, faster drawing\\r\\n\\r\\nQuite a long time ago [@flabbet](https://github.com/flabbet) wrote an article on the dynamic bitmaps, a system that saved RAM by ignoring the empty areas on the edges of each layer. \\r\\nFor example, if you had a 1000x1000 canvas with only a small 200x200 drawing in the middle, PixiEditor wouldn\'t store the whole 1000x1000 image. Instead, the \\r\\nstored image will be small, 200x200, just enough to fit the drawing. It will be expanded if you draw more things next to what\'s already there.\\r\\n\\r\\n<video width=\\"700\\" controls>\\r\\n    <source src=\\"/videos/dynamic-bitmaps.mp4\\" type=\\"video/mp4\\"/>\\r\\n    Your browser does not support the video tag.\\r\\n</video>\\r\\n\\r\\nI decided to bring this up because now this system will be replaced by a more elaborate, but also better-designed one. Instead of just ignoring empty areas \\r\\non the edges it will now take care of the empty areas in the middle of the drawing too. For instance, if you have a big canvas and you draw a large circle \\r\\nwithout any fill only the perimeter of the circle will be stored, not the whole image which would include the empty space inside. This is done by splitting\\r\\nthe canvas into many small square images, or chunks. Each chunk is 256x256 pixels. When you create a brand new canvas it has no chunks stored internally. \\r\\nOnce you start drawing only the chunks you are drawing on are created and saved in RAM.\\r\\n\\r\\n<video width=\\"700\\" controls>\\r\\n    <source src=\\"/img/blog-posts/devlog2/Chunk-Vis.mp4\\" type=\\"video/mp4\\"/>\\r\\n    Your browser does not support the video tag.\\r\\n</video>\\r\\n\\r\\nI could write a whole article about this system, but here I just want to mention a couple more details. The chunks don\'t just sit in RAM, they are also used to render \\r\\nwhat you see on screen. What\'s cool is that the new renderer can render separate chunks in low resolution when you zoom far away. Moreover, the chunks you don\'t see\\r\\non screen don\'t get rendered. This saves a lot of computation, meaning that you can now comfortably draw on large canvases.\\r\\n\\r\\n### Moveable reference layer\\r\\n\\r\\n[@CPKreuz](https://github.com/CPKreuz) aka @PixiCPU is currently working on improving the reference layer. It will get the same transformation features as the selection. \\r\\nIn other words, the reference image used to always be in the center, and now you\'ll be able to put it precisely where you want it to be.\\r\\n\\r\\n### Symmetry\\r\\n\\r\\nThis one is pretty simple. @Moki on Discord requested a feature that mirrors everything you draw on the other side of the canvas, and now it\'s in the prototype!\\r\\n\\r\\n<video width=\\"700\\" controls>\\r\\n    <source src=\\"/img/blog-posts/devlog2/Symmetry.mp4\\" type=\\"video/mp4\\"/>\\r\\n    Your browser does not support the video tag.\\r\\n</video>\\r\\n\\r\\n# Summary\\r\\n\\r\\nAs you can see, our hands are busy, palette system, command manager and whole new prototype are basically finished. In the next few weeks,\\r\\nwe will be integrating all of it. Stay tuned!"},{"id":"/2022/05/02/drawing-contest","metadata":{"permalink":"/blog/2022/05/02/drawing-contest","source":"@site/blog/2022-05-02-drawing-contest.mdx","title":"\ud83c\udf89 Celebratory Drawing Contest \ud83c\udf89","description":"Celebratory drawing contest for 100th members of PixiEditor Discord server.","date":"2022-05-02T00:00:00.000Z","formattedDate":"May 2, 2022","tags":[{"label":"pixel-art","permalink":"/blog/tags/pixel-art"},{"label":"contest","permalink":"/blog/tags/contest"}],"readingTime":0.46,"hasTruncateMarker":true,"authors":[{"name":"Krzysztof Krysi\u0144ski","title":"PixiEditor Creator","url":"https://krysinski.me","imageURL":"https://avatars.githubusercontent.com/u/25402427?s=400&v=4"}],"frontMatter":{"title":"\ud83c\udf89 Celebratory Drawing Contest \ud83c\udf89","author":"Krzysztof Krysi\u0144ski","author_title":"PixiEditor Creator","author_url":"https://krysinski.me","author_image_url":"https://avatars.githubusercontent.com/u/25402427?s=400&v=4","tags":["pixel-art","contest"],"keywords":["pixel-art","contest","discord"],"description":"Celebratory drawing contest for 100th members of PixiEditor Discord server."},"prevItem":{"title":"V1.0 Devlog","permalink":"/blog/2022/07/04/devlog2"},"nextItem":{"title":"Devlog 1 v0.1.7","permalink":"/blog/2021/11/13/devlog1"}},"content":"\ud83c\udf89 Our Discord server is growing fast and recently we\'ve reached 100 members! To \\r\\ncelebrate this achievement we\'ve decided to create a drawing contest. \ud83c\udf89\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n# Important info\\r\\n\\r\\n## \ud83c\udf81 What is the prize?\\r\\n\\r\\n\ud83e\udd47 1st place: Discord Nitro for 1 month\\r\\n\\r\\n\ud83e\udd48 2nd place: Discord Nitro Classic for 1 month\\r\\n\\r\\n## When?\\r\\n\\r\\nThe contest finishes 28.05.2022 at 2:59 PM GMT+1\\r\\n\\r\\n## Where?\\r\\n\\r\\n[On our Discord](https://discord.gg/nHgJDYrG4s?event=969232310622900275)\\r\\n\\r\\n## What\'s the topic?\\r\\n\\r\\n**Coziness**\\r\\n\\r\\n![Coziness](https://preview.redd.it/hs6ijh75xaw81.png?width=500&format=png&auto=webp&s=b07f45c13a191f3d582d270d42f36babe2b6ea5e)\\r\\n\\r\\n# Rules\\r\\n\\r\\nYou can find the rules [on this channel](https://discord.gg/kTyKJXHebK). Check out topmost message or pinned messages.\\r\\n\\r\\nGood luck!"},{"id":"/2021/11/13/devlog1","metadata":{"permalink":"/blog/2021/11/13/devlog1","source":"@site/blog/2021-11-13-devlog1.mdx","title":"Devlog 1 v0.1.7","description":"Current status of PixiEditor version v0.1.7 development.","date":"2021-11-13T00:00:00.000Z","formattedDate":"November 13, 2021","tags":[{"label":"pixieditor","permalink":"/blog/tags/pixieditor"},{"label":"progress","permalink":"/blog/tags/progress"},{"label":"devlog","permalink":"/blog/tags/devlog"}],"readingTime":2.965,"hasTruncateMarker":true,"authors":[{"name":"Krzysztof Krysi\u0144ski","title":"PixiEditor Creator","url":"https://krysinski.me","imageURL":"https://avatars.githubusercontent.com/u/25402427?s=400&v=4"}],"frontMatter":{"title":"Devlog 1 v0.1.7","author":"Krzysztof Krysi\u0144ski","author_title":"PixiEditor Creator","author_url":"https://krysinski.me","author_image_url":"https://avatars.githubusercontent.com/u/25402427?s=400&v=4","tags":["pixieditor","progress","devlog"],"keywords":["devlog","pixieditor","pixel-art editor"],"description":"Current status of PixiEditor version v0.1.7 development."},"prevItem":{"title":"\ud83c\udf89 Celebratory Drawing Contest \ud83c\udf89","permalink":"/blog/2022/05/02/drawing-contest"},"nextItem":{"title":"How to write a Todo list app in 10 lines of code in pure C# [no dependencies]","permalink":"/blog/2021/08/06/todo-csharp"}},"content":"Hello pixel makers, welcome to PixiEditor v0.1.7 development blog post. We have exciting news to share\\r\\nabout our latest version. A major rework is going on, there are lots of new features and bug fixes.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n# What has been going on for the past few months\\r\\n\\r\\nWe\'ve decided to rework the most important part of PixiEditor, the drawing backend, from the ground up.\\r\\nThe rework will open a lot of doors for us, from a huge performance boost to an easier and quicker\\r\\ncross-platform port. Thus the version 0.1.7 mostly has performance improvements and optimizations.\\r\\nApart from that, we are working really hard on fixing existing bugs (and trying not to create more), adding\\r\\nnew and exciting features, improving UI, etc.\\r\\n\\r\\n# Port to SkiaSharp\\r\\n\\r\\nFrom the v0.1.7 on, PixiEditor will use Skia as the drawing backend. Skia is an extremely performant image processing library made by Google.\\r\\nWith it, we managed to increase drawing speed to the point where a pen size of 300px is actually usable.\\r\\n\\r\\nWhile those are great news we are still facing some issues that are yet to be solved for a stable release.\\r\\nAlmost every aspect of the core code was affected, and we had to rewrite a lot of crucial components, such as\\r\\nthe undo system, tools, custom layer rendering, and much more.\\r\\n\\r\\nNew versus old comparison video: \\r\\n<video class=\\"blog-video\\" controls>\\r\\n  <source src=\\"/videos/skia.mkv\\" type=\\"video/mp4\\"/>\\r\\n  Your browser does not support the video tag.\\r\\n</video>\\r\\n\\r\\n# New features\\r\\n\\r\\nPixiEditor still lacks many features, and we are adding more and more of them in each version.\\r\\nThe same goes for the one below.\\r\\n\\r\\n## Layer grouping and hierarchy\\r\\n\\r\\nThis is the biggest feature coming to v0.1.7. From now on you\'ll be able to create layer groups and\\r\\nenhance the structure of your drawings. It took us almost 4 months to implement and while it is still not perfect,\\r\\nwe are pretty happy with the way it works already.\\r\\n\\r\\n<video class=\\"blog-video\\" controls>\\r\\n  <source src=\\"/videos/groups.mkv\\" type=\\"video/mp4\\"/>\\r\\n  Your browser does not support the video tag.\\r\\n</video>\\r\\n\\r\\n## Reference layer\\r\\n\\r\\nAnother interesting feature we implemented is the reference layer. Oftentimes while testing PixiEditor\\r\\nwe noticed that it would be convenient to have a full-resolution image as a background to our drawings. That was how\\r\\nthe reference layer came to life. With this feature you\'ll be able to select any image from the disk and it will fit your canvas\\r\\nin a uniform size. \\r\\n\\r\\n<video class=\\"blog-video\\" controls>\\r\\n  <source src=\\"/videos/reference-layer.mp4\\" type=\\"video/mp4\\"/>\\r\\n  Your browser does not support the video tag.\\r\\n</video>\\r\\n\\r\\n## Rotate and flip document/layers\\r\\n\\r\\nPretty self-explanatory. PixiEditor didn\'t have any rotation and flipping options, so now you\'ll be able\\r\\nto rotate the whole document and the individual layers (currently in 90-degree increments, a custom angle option is planned for v0.2).\\r\\n\\r\\n<video class=\\"blog-video\\" controls>\\r\\n  <source src=\\"/videos/rotate-flip.mkv\\" type=\\"video/mp4\\"/>\\r\\n  Your browser does not support the video tag.\\r\\n</video>\\r\\n\\r\\n## Magic wand tool\\r\\n\\r\\nMore tools, more selection capabilities. The magic wand tool selects an area that has the same color. Simple and effective.\\r\\n\\r\\n# Other changes and improvements\\r\\n\\r\\nWe replaced WPF Extended Toolkit zoombox with a custom one made to be more responsive and\\r\\nuser-friendly. There are a lot of new changes, and many of them are not mentioned in this post.\\r\\n\\r\\nNumerous bugs were fixed (and a few new ones were introduced as well).\\r\\n\\r\\n# Summary\\r\\n\\r\\nWe are happy with the current status of PixiEditor v0.1.7, but It\'s still not ready. New features, a reworked core, lots of \\r\\nbug fixes, new tools, and much more are waiting for the release. Stay tuned for the next posts!"},{"id":"/2021/08/06/todo-csharp","metadata":{"permalink":"/blog/2021/08/06/todo-csharp","source":"@site/blog/2021-08-06-todo-csharp.mdx","title":"How to write a Todo list app in 10 lines of code in pure C# [no dependencies]","description":"This tutorial shows how to write to do app in 10 lines of code in pure C#.","date":"2021-08-06T00:00:00.000Z","formattedDate":"August 6, 2021","tags":[{"label":"code","permalink":"/blog/tags/code"},{"label":"programming","permalink":"/blog/tags/programming"},{"label":"funny","permalink":"/blog/tags/funny"}],"readingTime":1.265,"hasTruncateMarker":true,"authors":[{"name":"Krzysztof Krysi\u0144ski","title":"PixiEditor Creator","url":"https://krysinski.me","imageURL":"https://avatars.githubusercontent.com/u/25402427?s=400&v=4"}],"frontMatter":{"title":"How to write a Todo list app in 10 lines of code in pure C# [no dependencies]","author":"Krzysztof Krysi\u0144ski","author_title":"PixiEditor Creator","author_url":"https://krysinski.me","author_image_url":"https://avatars.githubusercontent.com/u/25402427?s=400&v=4","tags":["code","programming","funny"],"keywords":["todo","to-do","list","csharp","programming"],"description":"This tutorial shows how to write to do app in 10 lines of code in pure C#."},"prevItem":{"title":"Devlog 1 v0.1.7","permalink":"/blog/2021/11/13/devlog1"},"nextItem":{"title":"Dynamic bitmaps","permalink":"/blog/2021/07/22/dynamic-bitmaps"}},"content":"Show me the one programmer who didn\'t want to write its own todo list app. In this article, I\'ll show you how\\r\\nto do that in 10 lines of code, without any external dependencies. Yes, really.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n## Talk is cheap, show me the code\\r\\n\\r\\nSo, let\'s start with a new console app in .NET 5\\r\\n\\r\\n![New Console App](/img/blog-posts/todo-csharp/newproj.png)\\r\\n\\r\\nLet\'s give it a name\\r\\n\\r\\n![Todo App Name](/img/blog-posts/todo-csharp/todoname.png)\\r\\n\\r\\nNow select .NET 5\\r\\n\\r\\n![Select .NET 5](/img/blog-posts/todo-csharp/dotnet5.png)\\r\\n\\r\\n## Great! Coding time\\r\\n\\r\\nSo, you ask me, how on earth, are you going to implement todo app in 10 lines of code?\\r\\n\\r\\nThe answer is simple, let me explain it step by step.\\r\\n\\r\\nLet\'s start with defining your todo tasks.\\r\\n\\r\\n```csharp\\r\\nBuyMilk();\\r\\nBakeCookies();\\r\\nTalkToYourGrandma();\\r\\nWatchTv();\\r\\nCode();\\r\\n```\\r\\n\\r\\nawesome, tasks defined. Now, go complete them, and after each completed task, come back to your pc and\\r\\nwrite a method. Like that\\r\\n\\r\\n```csharp\\r\\nBuyMilk();\\r\\nBakeCookies();\\r\\nTalkToYourGrandma();\\r\\nWatchTv();\\r\\nCode();\\r\\n\\r\\nvoid BuyMilk() { }\\r\\n```\\r\\n\\r\\nAfter you complete all of your tasks, your program will compile, which means, \\r\\nyou have completed your todo list and app at the same time!\\r\\n\\r\\nYou can see which tasks are completed and which are not, in the real time.\\r\\n\\r\\nBonus points if your code editor highlights existing methods with green color, and undefined with red. \\r\\n\\r\\nThis is a final code \\r\\n```csharp\\r\\nBuyMilk();\\r\\nBakeCookies();\\r\\nTalkToYourGrandma();\\r\\nWatchTv();\\r\\nCode();\\r\\n\\r\\nvoid BuyMilk() { }\\r\\nvoid BakeCookies() { } ;\\r\\nvoid WatchTv() { }\\r\\nvoid TalkToYourGrandma() { }\\r\\nvoid Code() { }\\r\\n```\\r\\n\\r\\nThank you for coming to my TED talk."},{"id":"/2021/07/22/dynamic-bitmaps","metadata":{"permalink":"/blog/2021/07/22/dynamic-bitmaps","source":"@site/blog/2021-07-22-dynamic-bitmaps.mdx","title":"Dynamic bitmaps","description":"Dynamic bitmap is a solution which made PixiEditor work multiple times faster, decreased RAM usage 10 times, and solved memory leak problems.  This article will explain what it is and how it works.","date":"2021-07-22T00:00:00.000Z","formattedDate":"July 22, 2021","tags":[{"label":"code","permalink":"/blog/tags/code"},{"label":"solution","permalink":"/blog/tags/solution"}],"readingTime":5.39,"hasTruncateMarker":true,"authors":[{"name":"Krzysztof Krysi\u0144ski","title":"PixiEditor Creator","url":"https://krysinski.me","imageURL":"https://avatars.githubusercontent.com/u/25402427?s=400&v=4"}],"frontMatter":{"title":"Dynamic bitmaps","author":"Krzysztof Krysi\u0144ski","author_title":"PixiEditor Creator","author_url":"https://krysinski.me","author_image_url":"https://avatars.githubusercontent.com/u/25402427?s=400&v=4","tags":["code","solution"],"keywords":["bitmap","dynamic","data-structure","image","optimization"],"description":"Dynamic bitmap is a solution which made PixiEditor work multiple times faster, decreased RAM usage 10 times, and solved memory leak problems.  This article will explain what it is and how it works."},"prevItem":{"title":"How to write a Todo list app in 10 lines of code in pure C# [no dependencies]","permalink":"/blog/2021/08/06/todo-csharp"},"nextItem":{"title":"Launching PixiEditor.net","permalink":"/blog/2021/06/06/pixieditor-net-launch"}},"content":"Dynamic bitmaps are a solution that made PixiEditor work multiple times faster, decreased RAM usage by about 10 times and solved memory leak problems. \\r\\nThis article will explain what dynamic bitmaps are and how they work.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n## History\\r\\n\\r\\nDynamic bitmaps have been introduced in a very early alpha (version v0.0.3), before that the PixiEditor image system was pretty straightforward.\\r\\n\\r\\nMouse clicks were converted into relative canvas coordinates, and then color was applied to the pixels at a given position. It was pretty simple, however, this solution had one big downside. PixiEditor uses [WriteableBitmap](https://docs.microsoft.com/pl-pl/dotnet/api/system.windows.media.imaging.writeablebitmap?view=net-5.0)\\r\\nto manipulate bitmaps and working on bigger canvases using this solution yielded bad performance and huge memory consumption.\\r\\n\\r\\nSo what was the solution? Dynamic bitmaps!\\r\\n\\r\\n## What is a dynamic bitmap?\\r\\n\\r\\nIn simple words, a dynamic bitmap is a bitmap that fits the size of its content. This is crucial for the layer system.\\r\\nHere is a visual representation of how it works \\r\\n\\r\\n<video class=\\"blog-video\\" controls>\\r\\n  <source src=\\"/videos/dynamic-bitmaps.mp4\\" type=\\"video/mp4\\"/>\\r\\n</video>\\r\\n\\r\\n## How it works\\r\\n\\r\\nLet\'s start with a simple algorithm\\r\\n\\r\\n```\\r\\n1. Create a new bitmap with a size of 0x0 (or of any other size, depending on your usage)\\r\\n2. When set pixel is requested (for example user clicked on canvas), do the following:\\r\\n3. If the color is not transparent (if alpha is not 0):\\r\\n\\r\\n  a. If X of given coordinates is bigger than current width or Y is bigger than height, Increase size to bottom right\\r\\n\\r\\n  b. Else if new colored pixel X is smaller than 0 (relative to bitmap coordinates) or Y is smaller than 0, then increase the size to top left\\r\\n  \\r\\n4. Else If: color is transparent and coordinates already contain non-transparent pixel and after deleting them, there is a gap between content and the bitmap:\\r\\n  a. Decrease size of bitmap to fit content\\r\\n  ```\\r\\n\\r\\n  The process of resizing the bitmap is quite simple:\\r\\n\\r\\n  ```\\r\\n  1. Create a new bitmap with the desired size\\r\\n  2. Copy pixels from the current bitmap\\r\\n  3. Fill a new bitmap with the copied pixels at a calculated offset.\\r\\n  ```\\r\\n\\r\\n  However, the implementation is not trivial, it requires some calculations, like extracting the border pixels, calculating offsets,\\r\\n   checking if a coordinate is a border pixel and more.\\r\\n\\r\\n   ## How PixiEditor does this\\r\\n\\r\\n   Our algorithms look like this:\\r\\n\\r\\n   ```csharp\\r\\n        public void DynamicResize(BitmapPixelChanges pixels)\\r\\n        {\\r\\n            if (pixels.ChangedPixels.Count == 0)\\r\\n            {\\r\\n                return;\\r\\n            }\\r\\n\\r\\n            ResetOffset(pixels);\\r\\n            Tuple<DoubleCords, bool> borderData = ExtractBorderData(pixels);\\r\\n            DoubleCords minMaxCords = borderData.Item1;\\r\\n            int newMaxX = minMaxCords.Coords2.X - OffsetX;\\r\\n            int newMaxY = minMaxCords.Coords2.Y - OffsetY;\\r\\n            int newMinX = minMaxCords.Coords1.X - OffsetX;\\r\\n            int newMinY = minMaxCords.Coords1.Y - OffsetY;\\r\\n\\r\\n            if (!(pixels.WasBuiltAsSingleColored && pixels.ChangedPixels.First().Value.A == 0)) //Check if all requested pixels are transparent\\r\\n            {\\r\\n                if ((newMaxX + 1 > Width && Width < MaxWidth) || (newMaxY + 1 > Height && Height < MaxHeight))\\r\\n                {\\r\\n                    IncreaseSizeToBottomAndRight(newMaxX, newMaxY);\\r\\n                }\\r\\n\\r\\n                if ((newMinX < 0 && Width < MaxWidth) || (newMinY < 0 && Height < MaxHeight))\\r\\n                {\\r\\n                    IncreaseSizeToTopAndLeft(newMinX, newMinY);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // if clip (fit bitmap to content) is requested\\r\\n            if (borderData.Item2)\\r\\n            {\\r\\n                clipRequested = true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        private void IncreaseSizeToBottomAndRight(int newMaxX, int newMaxY)\\r\\n        {\\r\\n            if (MaxWidth - OffsetX < 0 || MaxHeight - OffsetY < 0)\\r\\n            {\\r\\n                return;\\r\\n            }\\r\\n\\r\\n            newMaxX = Math.Clamp(Math.Max(newMaxX + 1, Width), 0, MaxWidth - OffsetX);\\r\\n            newMaxY = Math.Clamp(Math.Max(newMaxY + 1, Height), 0, MaxHeight - OffsetY);\\r\\n\\r\\n            ResizeCanvas(0, 0, 0, 0, newMaxX, newMaxY);\\r\\n        }\\r\\n\\r\\n        private void IncreaseSizeToTopAndLeft(int newMinX, int newMinY)\\r\\n        {\\r\\n            newMinX = Math.Clamp(Math.Min(newMinX, Width), Math.Min(-OffsetX, OffsetX), 0);\\r\\n            newMinY = Math.Clamp(Math.Min(newMinY, Height), Math.Min(-OffsetY, OffsetY), 0);\\r\\n\\r\\n            Offset = new Thickness(\\r\\n                Math.Clamp(OffsetX + newMinX, 0, MaxWidth),\\r\\n                Math.Clamp(OffsetY + newMinY, 0, MaxHeight),\\r\\n                0,\\r\\n                0);\\r\\n\\r\\n            int newWidth = Math.Clamp(Width - newMinX, 0, MaxWidth);\\r\\n            int newHeight = Math.Clamp(Height - newMinY, 0, MaxHeight);\\r\\n\\r\\n            int offsetX = Math.Abs(newWidth - Width);\\r\\n            int offsetY = Math.Abs(newHeight - Height);\\r\\n\\r\\n            ResizeCanvas(offsetX, offsetY, 0, 0, newWidth, newHeight);\\r\\n        }\\r\\n\\r\\n        private void ResizeCanvas(int offsetX, int offsetY, int offsetXSrc, int offsetYSrc, int newWidth, int newHeight)\\r\\n        {\\r\\n            int iteratorHeight = Height > newHeight ? newHeight : Height;\\r\\n            int count = Width > newWidth ? newWidth : Width;\\r\\n\\r\\n            using (BitmapContext srcContext = LayerBitmap.GetBitmapContext(ReadWriteMode.ReadOnly))\\r\\n            {\\r\\n                WriteableBitmap result = BitmapFactory.New(newWidth, newHeight);\\r\\n                using (BitmapContext destContext = result.GetBitmapContext())\\r\\n                {\\r\\n                    for (int line = 0; line < iteratorHeight; line++)\\r\\n                    {\\r\\n                        int srcOff = (((offsetYSrc + line) * Width) + offsetXSrc) * SizeOfArgb;\\r\\n                        int dstOff = (((offsetY + line) * newWidth) + offsetX) * SizeOfArgb;\\r\\n                        BitmapContext.BlockCopy(srcContext, srcOff, destContext, dstOff, count * SizeOfArgb);\\r\\n                    }\\r\\n\\r\\n                    LayerBitmap = result;\\r\\n                    Width = newWidth;\\r\\n                    Height = newHeight;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        private Tuple<DoubleCords, bool> ExtractBorderData(BitmapPixelChanges pixels)\\r\\n        {\\r\\n            Coordinates firstCords = pixels.ChangedPixels.First().Key;\\r\\n            int minX = firstCords.X;\\r\\n            int minY = firstCords.Y;\\r\\n            int maxX = minX;\\r\\n            int maxY = minY;\\r\\n            bool clipRequested = false;\\r\\n\\r\\n            foreach (KeyValuePair<Coordinates, Color> pixel in pixels.ChangedPixels)\\r\\n            {\\r\\n                if (pixel.Key.X < minX)\\r\\n                {\\r\\n                    minX = pixel.Key.X;\\r\\n                }\\r\\n                else if (pixel.Key.X > maxX)\\r\\n                {\\r\\n                    maxX = pixel.Key.X;\\r\\n                }\\r\\n\\r\\n                if (pixel.Key.Y < minY)\\r\\n                {\\r\\n                    minY = pixel.Key.Y;\\r\\n                }\\r\\n                else if (pixel.Key.Y > maxY)\\r\\n                {\\r\\n                    maxY = pixel.Key.Y;\\r\\n                }\\r\\n\\r\\n                if (clipRequested == false && IsBorderPixel(pixel.Key) && pixel.Value.A == 0)\\r\\n                {\\r\\n                    clipRequested = true;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            return new Tuple<DoubleCords, bool>(\\r\\n                new DoubleCords(new Coordinates(minX, minY), new Coordinates(maxX, maxY)), clipRequested);\\r\\n        }\\r\\n\\r\\n        private bool IsBorderPixel(Coordinates cords)\\r\\n        {\\r\\n            return cords.X - OffsetX == 0 || cords.Y - OffsetY == 0 || cords.X - OffsetX == Width - 1 ||\\r\\n                   cords.Y - OffsetY == Height - 1;\\r\\n        }\\r\\n```\\r\\n\\r\\nAs you can see, the code is not trivial, it takes a lot of steps, our implementation also does a bit more stuff, like requesting clips \\r\\n(resizing whole document to perfectly fit the content) and clamping the maximum size. \\r\\n\\r\\n## Performance\\r\\n\\r\\nOur implementation is very performant since we are using fast `BitmapContext.BlockCopy` to copy and paste pixels into a new bitmap.\\r\\n\\r\\nIt\'s almost unnoticeable in real-time, with fast mouse movement small visual jittering can be visible, but there is no delay whatsoever.\\r\\nHow fast dynamic bitmaps work, depends on the implementation, platform, native bitmap APIs, etc.\\r\\n\\r\\n## Other benefits\\r\\n\\r\\nThe benefits described below are not directly related to the implementation, but the usage of dynamic bitmaps.\\r\\n\\r\\nThese features are way easier to create (or possible at all), thanks to perfectly fitted bitmaps:\\r\\n- Resize and rotate border,\\r\\n- Clip canvas (fit document to content),\\r\\n- Center content relative to document or other layers,\\r\\n- Snapping and guides\\r\\n- Efficient preview layers\\r\\n\\r\\n## Conclusion\\r\\n\\r\\nDynamic bitmaps are a very useful structure, it helps to create a lot of small bitmaps, which can be easily reused. \\r\\nNo more unnecessary memory allocation and heavy CPU operations. If you want to learn more, \\r\\njoin our [Discord](https://discord.gg/qSRMYmq), we are open to discussions!"},{"id":"/2021/06/06/pixieditor-net-launch","metadata":{"permalink":"/blog/2021/06/06/pixieditor-net-launch","source":"@site/blog/2021-06-06-pixieditor-net-launch.mdx","title":"Launching PixiEditor.net","description":"PixiEditor.net has launched!","date":"2021-06-06T00:00:00.000Z","formattedDate":"June 6, 2021","tags":[{"label":"pixieditornet","permalink":"/blog/tags/pixieditornet"},{"label":"website","permalink":"/blog/tags/website"},{"label":"launch","permalink":"/blog/tags/launch"}],"readingTime":0.235,"hasTruncateMarker":true,"authors":[{"name":"Krzysztof Krysi\u0144ski","title":"PixiEditor Creator","url":"https://krysinski.me","imageURL":"https://avatars.githubusercontent.com/u/25402427?s=400&v=4"}],"frontMatter":{"title":"Launching PixiEditor.net","author":"Krzysztof Krysi\u0144ski","author_title":"PixiEditor Creator","author_url":"https://krysinski.me","author_image_url":"https://avatars.githubusercontent.com/u/25402427?s=400&v=4","tags":["pixieditornet","website","launch"],"description":"PixiEditor.net has launched!","hide_table_of_contents":false},"prevItem":{"title":"Dynamic bitmaps","permalink":"/blog/2021/07/22/dynamic-bitmaps"}},"content":"\ud83c\udf89 PixiEditor.net has launched! \ud83c\udf89\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nOur official website has finally launched! From now on, everything related to project will be posted here along with our social-medias.\\r\\nYou can now download PixiEditor from our website, read docs (GitHub wiki docs will be archived) and read blog posts."}]}')}}]);