"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7413],{1591:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>s,metadata:()=>r,toc:()=>d});var i=o(5893),n=o(1151);const s={title:"PixiEditor Devlog 3",author:"Krzysztof Krysi\u0144ski",author_title:"PixiEditor Creator",author_url:"https://github.com/flabbet",author_image_url:"https://avatars.githubusercontent.com/u/25402427?s=400&v=4",tags:["devlog","pixieditor2.0"],keywords:["pixieditor","devlog","pixieditor2.0"],description:"Devlog 3 for PixiEditor 2.0"},a=void 0,r={permalink:"/blog/2024/05/08/devlog3",source:"@site/blog/2024-05-08-devlog3.mdx",title:"PixiEditor Devlog 3",description:"Devlog 3 for PixiEditor 2.0",date:"2024-05-08T00:00:00.000Z",formattedDate:"May 8, 2024",tags:[{label:"devlog",permalink:"/blog/tags/devlog"},{label:"pixieditor2.0",permalink:"/blog/tags/pixieditor-2-0"}],readingTime:4.255,hasTruncateMarker:!1,authors:[{name:"Krzysztof Krysi\u0144ski",title:"PixiEditor Creator",url:"https://github.com/flabbet",imageURL:"https://avatars.githubusercontent.com/u/25402427?s=400&v=4"}],frontMatter:{title:"PixiEditor Devlog 3",author:"Krzysztof Krysi\u0144ski",author_title:"PixiEditor Creator",author_url:"https://github.com/flabbet",author_image_url:"https://avatars.githubusercontent.com/u/25402427?s=400&v=4",tags:["devlog","pixieditor2.0"],keywords:["pixieditor","devlog","pixieditor2.0"],description:"Devlog 3 for PixiEditor 2.0"},unlisted:!1,nextItem:{title:"PixiEditor license change",permalink:"/blog/2023/09/07/license-change"}},l={authorsImageUrls:[void 0]},d=[{value:"State of the project",id:"state-of-the-project",level:2},{value:"New look and feel",id:"new-look-and-feel",level:2},{value:"Icons",id:"icons",level:3},{value:"New docking System",id:"new-docking-system",level:3},{value:"Animations",id:"animations",level:2},{value:"Extensions",id:"extensions",level:2},{value:"What&#39;s next?",id:"whats-next",level:2}];function h(e){const t={a:"a",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",ul:"ul",...(0,n.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"Long time no see! I've been working on PixiEditor 2.0 for a while now, and I have some updates to share with you."}),"\n",(0,i.jsx)(t.h2,{id:"state-of-the-project",children:"State of the project"}),"\n",(0,i.jsxs)(t.p,{children:["I am happy to announce, that I'll be working on PixiEditor full-time from now on. I resigned from a juicy programmer salary, so I can work on PixiEditor every day and bring the greatest 2D app to life.\r\nIf you'd like to support me, you can do so by ",(0,i.jsx)(t.a,{href:"/donate",children:"buying a supporter pack"}),"."]}),"\n",(0,i.jsx)(t.p,{children:"As you may know, we announced PixiEditor 2.0 about 4 months ago and promised exciting features like animations, layer nodes, infinite canvas, and extensions."}),"\n",(0,i.jsx)(t.p,{children:"The sheer amount of work required to make all of these features is simply enormous, but fear not, we're up to the challenge."}),"\n",(0,i.jsx)(t.p,{children:"Almost a year ago, we started working on the huge task of changing the UI framework of the app. This means basically, that most of the app had to be rewritten from scratch.\r\nUp until now, PixiEditor was built in something called WPF, it is a framework for building Windows applications. It's great, but it's not cross-platform. We've decided to switch to AvaloniaUI which solves this problem."}),"\n",(0,i.jsx)(t.p,{children:"And oh boy, what a journey it was. I mean, it still is. Besides replicating all of the UI elements, behaviors, and features, I allowed myself to\r\nsidetrack a little bit to improve various elements from the WPF version, fix old bugs, and prepare everything for new features, mostly extensions."}),"\n",(0,i.jsx)(t.h2,{id:"new-look-and-feel",children:"New look and feel"}),"\n",(0,i.jsx)(t.p,{children:"The new UI is not only refreshed but also more consistent, prepared for creating custom themes, and more user-friendly. Here's a sneak peek:"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"PixiEditor 2.0 UI",src:o(7135).Z+"",width:"1928",height:"1040"})}),"\n",(0,i.jsx)(t.h3,{id:"icons",children:"Icons"}),"\n",(0,i.jsx)(t.p,{children:"We've remade a lot of the icons of the app so they are more consistent and look better, we've also changed the way how they are stored and loaded, previously all of them were PNGs, so\r\nscaling was visible on some of them. Now we use SVGs, which are vector graphics, so they look sharp at any size. Here's a comparison:"}),"\n",(0,i.jsx)(t.p,{children:"Old:"}),"\n",(0,i.jsx)("img",{src:"/img/blog-posts/devlog3/oldToolset.png",alt:"Old icons",style:{width:100}}),"\n",(0,i.jsx)(t.p,{children:"New:"}),"\n",(0,i.jsx)("img",{src:"/img/blog-posts/devlog3/newToolset.png",alt:"New icons",style:{width:100}}),"\n",(0,i.jsx)(t.h3,{id:"new-docking-system",children:"New docking System"}),"\n",(0,i.jsx)(t.p,{children:"In PixiEditor WPF's version, we used a ready-made solution called AvalonDock, which was nice but had some limitations. There is something similar to AvalonDock in AvaloniaUI available, but after playing with it for a while, I couldn't achieve the desired\r\neffect. As a result, I've decided to write my own system, it works exactly the way I want it to, and it's much more flexible. Here's a demo:"}),"\n",(0,i.jsx)("video",{src:"/videos/devlog3/docking.mp4",style:{width:"100%"},autoPlay:!0,muted:!0}),"\n",(0,i.jsx)(t.h2,{id:"animations",children:"Animations"}),"\n",(0,i.jsx)(t.p,{children:"Animations are one of the most anticipated features of PixiEditor 2.0. And we've begun working on them! We're fairly early in the development process, but we already have something to show."}),"\n",(0,i.jsx)(t.p,{children:"Here's a funky little animation I've made using PixiEditor 2.0:"}),"\n",(0,i.jsx)("video",{src:"/videos/devlog3/anim.mp4",style:{width:"100%"},autoPlay:!0,muted:!0,loop:!0}),"\n",(0,i.jsx)(t.p,{children:"So far we built basic support for frame-by-frame animations, however, we plan to add property keyframes, like opacity, position, rotation, etc."}),"\n",(0,i.jsx)(t.h2,{id:"extensions",children:"Extensions"}),"\n",(0,i.jsx)(t.p,{children:"This is so far the most challenging part of the project, it influences almost every other aspect of the app. We want to make PixiEditor as extensible as possible, but also keep it simple, easy to use, and secure."}),"\n",(0,i.jsx)(t.p,{children:"There are a few key elements that describe my philosophy of extensions:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Write once, run everywhere - extensions should be cross-platform and work everywhere PixiEditor works, developers should not worry about compatibility."}),"\n",(0,i.jsx)(t.li,{children:"Secure - extensions should not be able to access any sensitive data, connect to the internet, or access connected devices unless explicitly allowed by the user."}),"\n",(0,i.jsx)(t.li,{children:"Easy to use - developers should be able to create extensions with minimal effort, and users should be able to install them with a single click."}),"\n",(0,i.jsx)(t.li,{children:"Language-agnostic API - We don't want to limit developers in terms of programming language, originally PixiEditor was written in C#, but we want to allow developers to write extensions in any language they want."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Yeah, I know this sounds like a list written by someone who doesn't even know how to connect a printer and just writes down what sounds good, but surprise surprise, most of these goals are already achieved."}),"\n",(0,i.jsx)(t.p,{children:"All thanks to the amazing piece of technology called WASI. It stands for \"WebAssembly System Interface\", and don't get fooled by the name, it's not just for the web.\r\nI'll not go into technical details here, but in short, it allows running pieces of code in a secure, isolated environment, and it doesn't care about the language it's originally written in."}),"\n",(0,i.jsx)(t.p,{children:"The blog post about it soon! A little more technical one, so if you're interested in this topic, stay tuned."}),"\n",(0,i.jsx)(t.h2,{id:"whats-next",children:"What's next?"}),"\n",(0,i.jsxs)(t.p,{children:["We plan to share devlogs roughly every 2 weeks, so you can stay up to date with the project.\r\nWe're almost fully focusing on animations right now, closed alpha will be available in the following months, so stay tuned and make sure to ",(0,i.jsx)(t.a,{href:"/v2",children:"sign up for the newsletter"})," to get early access to PixiEditor 2.0."]}),"\n",(0,i.jsx)(t.p,{children:"Have a great day and see you in two weeks!"})]})}function c(e={}){const{wrapper:t}={...(0,n.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},7135:(e,t,o)=>{o.d(t,{Z:()=>i});const i=o.p+"assets/images/newUI-88788d53e9bfee0adba7d219aea55366.png"},1151:(e,t,o)=>{o.d(t,{Z:()=>r,a:()=>a});var i=o(7294);const n={},s=i.createContext(n);function a(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);