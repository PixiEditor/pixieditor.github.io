"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[452],{5210:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>a,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var n=i(5893),o=i(1670);const r={id:"toolbar-settings",title:"Toolbar Settings",sidebar_label:"Toolbar Settings"},s="Introduction",l={id:"toolbar-settings",title:"Toolbar Settings",description:"Some information on this page is outdated. Docs are work in progress.",source:"@site/../docs/ToolbarSettings.mdx",sourceDirName:".",slug:"/toolbar-settings",permalink:"/docs/toolbar-settings",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"toolbar-settings",title:"Toolbar Settings",sidebar_label:"Toolbar Settings"},sidebar:"docs",previous:{title:"Toolbars",permalink:"/docs/toolbars"},next:{title:"Color Picker Control Overview",permalink:"/docs/color-picker"}},a={},c=[{value:"Creating existing Setting",id:"creating-existing-setting",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.admonition,{type:"caution",children:(0,n.jsx)(t.p,{children:"Some information on this page is outdated. Docs are work in progress."})}),"\n",(0,n.jsx)(t.admonition,{type:"info",children:(0,n.jsx)(t.p,{children:"Since version 0.1.3.2, Settings are typed, this guide is still relevant, but syntax might vary."})}),"\n",(0,n.jsx)(t.h1,{id:"introduction",children:"Introduction"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.a,{href:"https://github.com/PixiEditor/PixiEditor/blob/master/PixiEditor/Models/Tools/ToolSettings/Settings/Setting.cs",children:"Setting"})," is a core part of ",(0,n.jsx)(t.a,{href:"https://github.com/PixiEditor/PixiEditor/wiki/Toolbars",children:"Toolbars"}),", Setting can be a simple CheckBox or a complex Color Picker. Every setting consist of:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"Name"})," - A unique id, that allows identifying the setting and share values between toolbars."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"Value"})," - A result value of the setting."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"SettingControl"})," - UI part of Setting, a WPF Control."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"Label"})," (optional) - Label for Setting, appears on the left from the control"]}),"\n"]}),"\n",(0,n.jsx)(t.h1,{id:"pre-made-settings",children:"Pre-made Settings"}),"\n",(0,n.jsxs)(t.p,{children:["Here is a list of some of the pre-built settings ready to use, for a full list, check out ",(0,n.jsx)(t.a,{href:"https://github.com/PixiEditor/PixiEditor/tree/master/PixiEditor/Models/Tools/ToolSettings/Settings",children:"source code"})]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"BoolSetting"})," - Boolean Checkbox"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"ColorSetting"})," - Pop-up(Portable) color picker"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"DropdownSetting"})," - ComboBox with array of string values"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"FloatSetting"})," - A TextBox that accepts floating precision values"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"SizeSetting"}),' - A TextBox that accepts integers (Size in pixels), adds "px" at the end of edit (Value is still integer)']}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"creating-existing-setting",children:"Creating existing Setting"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csharp",children:'Setting setting = new DropdownSetting("Mode", new[] {"New", "Add", "Subtract"}, "Selection type"); //"Mode" is a name (ID), array is a list of values for \r\n                                                                                                   //DropdownSetting, "Selection type" is a label.\n'})}),"\n",(0,n.jsxs)(t.p,{children:["You can add ",(0,n.jsx)(t.code,{children:"setting"})," to Toolbar as described in ",(0,n.jsx)(t.a,{href:"https://github.com/PixiEditor/PixiEditor/wiki/Toolbars",children:"this guide"})," and it will be ready to use."]}),"\n",(0,n.jsx)(t.h1,{id:"creating-a-new-setting",children:"Creating a new Setting"}),"\n",(0,n.jsx)(t.p,{children:"Creating a Setting is not a hard task, but can be tricky sometimes."}),"\n",(0,n.jsx)(t.p,{children:"Let's get a simple example from source code."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csharp",children:'public class ColorSetting : Setting\r\n    {\r\n        public ColorSetting(string name, string label = "") : base(name)\r\n        {\r\n            Label = label;\r\n            SettingControl = GenerateColorPicker();\r\n            Value = Color.FromArgb(0, 0, 0, 0);\r\n        }\r\n\r\n        private PortableColorPicker GenerateColorPicker()\r\n        {\r\n            PortableColorPicker picker = new PortableColorPicker();\r\n            Binding binding = new Binding("Value")\r\n            {\r\n                Mode = BindingMode.TwoWay\r\n            };\r\n            picker.SetBinding(PortableColorPicker.SelectedColorProperty, binding);\r\n            return picker;\r\n        }\r\n    }\n'})}),"\n",(0,n.jsxs)(t.p,{children:["As you can see, a ",(0,n.jsx)(t.code,{children:"Setting"})," requires ",(0,n.jsx)(t.code,{children:"Name"})," as a parameter. It's good to pass a label as an optional one. We are providing transparent color as a default ",(0,n.jsx)(t.code,{children:"Value"})," and generating ",(0,n.jsx)(t.code,{children:"PortableColorPicker"}),"."]}),"\n",(0,n.jsx)(t.p,{children:"The tricky part is in generating Control since you must bind correct values."}),"\n",(0,n.jsxs)(t.p,{children:['In this example, we are binding "Value" (the Setting property) to the PortableColorPicker ',(0,n.jsx)(t.code,{children:"SelectedColorProperty"}),". Usually, the principle is the same for most controls, but sometimes you might want to bind more things, check out ",(0,n.jsx)(t.a,{href:"https://github.com/PixiEditor/PixiEditor/tree/master/PixiEditor/Models/Tools/ToolSettings/Settings",children:"other source code files"})," for more reference."]}),"\n",(0,n.jsx)(t.h1,{id:"conclusion",children:"Conclusion"}),"\n",(0,n.jsx)(t.p,{children:"The settings are a very comfortable way for easily setting up the tool values, Toolbar system takes care of getting the values and managing them. Building a Setting is easy but requires a bit of setup."})]})}function h(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},1670:(e,t,i)=>{i.d(t,{a:()=>s});var n=i(7294);const o={},r=n.createContext(o);function s(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}}}]);