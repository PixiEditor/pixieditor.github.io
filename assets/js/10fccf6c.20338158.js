"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[627],{3905:function(e,o,t){t.d(o,{Zo:function(){return d},kt:function(){return m}});var n=t(7294);function l(e,o,t){return o in e?Object.defineProperty(e,o,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[o]=t,e}function i(e,o){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);o&&(n=n.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),t.push.apply(t,n)}return t}function r(e){for(var o=1;o<arguments.length;o++){var t=null!=arguments[o]?arguments[o]:{};o%2?i(Object(t),!0).forEach((function(o){l(e,o,t[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(t,o))}))}return e}function a(e,o){if(null==e)return{};var t,n,l=function(e,o){if(null==e)return{};var t,n,l={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],o.indexOf(t)>=0||(l[t]=e[t]);return l}(e,o);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],o.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=n.createContext({}),p=function(e){var o=n.useContext(s),t=o;return e&&(t="function"==typeof e?e(o):r(r({},o),e)),t},d=function(e){var o=p(e.components);return n.createElement(s.Provider,{value:o},e.children)},u={inlineCode:"code",wrapper:function(e){var o=e.children;return n.createElement(n.Fragment,{},o)}},c=n.forwardRef((function(e,o){var t=e.components,l=e.mdxType,i=e.originalType,s=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),c=p(t),m=l,h=c["".concat(s,".").concat(m)]||c[m]||u[m]||i;return t?n.createElement(h,r(r({ref:o},d),{},{components:t})):n.createElement(h,r({ref:o},d))}));function m(e,o){var t=arguments,l=o&&o.mdxType;if("string"==typeof e||l){var i=t.length,r=new Array(i);r[0]=c;var a={};for(var s in o)hasOwnProperty.call(o,s)&&(a[s]=o[s]);a.originalType=e,a.mdxType="string"==typeof e?e:l,r[1]=a;for(var p=2;p<i;p++)r[p]=t[p];return n.createElement.apply(null,r)}return n.createElement.apply(null,t)}c.displayName="MDXCreateElement"},6514:function(e,o,t){t.r(o),t.d(o,{frontMatter:function(){return a},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return d},default:function(){return c}});var n=t(7462),l=t(3366),i=(t(7294),t(3905)),r=["components"],a={id:"building-tool",title:"Building a tool",sidebar_label:"Building a tool"},s="Introduction",p={unversionedId:"building-tool",id:"building-tool",title:"Building a tool",description:"In this guide, we will be building a simple, single-pixel drawing tool, to show the process of creating tools.",source:"@site/../docs/BuildingTool.mdx",sourceDirName:".",slug:"/building-tool",permalink:"/docs/building-tool",tags:[],version:"current",frontMatter:{id:"building-tool",title:"Building a tool",sidebar_label:"Building a tool"},sidebar:"docs",previous:{title:"Toolbars",permalink:"/docs/toolbars"},next:{title:"Toolbar Settings",permalink:"/docs/toolbar-settings"}},d=[{value:"BitmapOperationTool",id:"bitmapoperationtool",children:[],level:2},{value:"ReadonlyTool",id:"readonlytool",children:[],level:2},{value:"ToolType",id:"tooltype",children:[],level:2},{value:"Building Use logic",id:"building-use-logic",children:[{value:"layer",id:"layer",children:[],level:3},{value:"mouseMove",id:"mousemove",children:[],level:3},{value:"color",id:"color",children:[],level:3}],level:2},{value:"Implementation",id:"implementation",children:[],level:2}],u={toc:d};function c(e){var o=e.components,t=(0,l.Z)(e,r);return(0,i.kt)("wrapper",(0,n.Z)({},u,t,{components:o,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"In this guide, we will be building a simple, single-pixel drawing tool, to show the process of creating tools."),(0,i.kt)("h1",{id:"tool-types"},"Tool Types"),(0,i.kt)("p",null,"There are 2 main different types of tools."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"BitmapOperationTool")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"ReadonlyTool"),"."),(0,i.kt)("h2",{id:"bitmapoperationtool"},"BitmapOperationTool"),(0,i.kt)("p",null,"BitmapOperationTool is a tool, that performs some kind of operation, which yields the result as change on canvas."),(0,i.kt)("p",null,"An example of such a tool is ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/PixiEditor/PixiEditor/blob/master/PixiEditor/Models/Tools/Tools/EraserTool.cs"},(0,i.kt)("inlineCode",{parentName:"a"},"EarserTool")),' which "erases" pixels (changes the color to transparent).'),(0,i.kt)("p",null,"It does two main things:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Processes the input data"),(0,i.kt)("li",{parentName:"ul"},"Returns the changed pixels")),(0,i.kt)("h2",{id:"readonlytool"},"ReadonlyTool"),(0,i.kt)("p",null,"Readonly tool, as the name suggests, does not return any data, it just processes the input."),(0,i.kt)("p",null,"An Example is ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/PixiEditor/PixiEditor/blob/master/PixiEditor/Models/Tools/Tools/SelectTool.cs"},(0,i.kt)("inlineCode",{parentName:"a"},"SelectTool"))," which selects the area on the canvas. It doesn't affect the layers in any way."),(0,i.kt)("h1",{id:"building-the-single-pixel-pen-tool"},"Building the single-pixel Pen Tool"),(0,i.kt)("p",null,"We are starting by creating a ",(0,i.kt)("inlineCode",{parentName:"p"},"SinglePixelTool.cs")," file in ",(0,i.kt)("inlineCode",{parentName:"p"},"Models/Tools/Tools")," folder."),(0,i.kt)("p",null,"Our tool will ",(0,i.kt)("em",{parentName:"p"},"draw")," the pixel, which means we should inherit from ",(0,i.kt)("inlineCode",{parentName:"p"},"BitmapOperationTool"),"."),(0,i.kt)("p",null,"By now the script should look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"using PixiEditor.Models.DataHolders;\nusing PixiEditor.Models.Layers;\nusing PixiEditor.Models.Position;\nusing System;\nusing System.Windows.Media;\n\nnamespace PixiEditor.Models.Tools.Tools\n{\n    public class SinglePixelTool : BitmapOperationTool\n    {\n        public override ToolType ToolType => throw new NotImplementedException();\n\n        public override LayerChange[] Use(Layer layer, Coordinates[] mouseMove, Color color)\n        {\n            throw new NotImplementedException();\n        }\n    }\n}\n")),(0,i.kt)("p",null,"As we can see, we have 2 required abstractions, ",(0,i.kt)("inlineCode",{parentName:"p"},"ToolType")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Use"),"."),(0,i.kt)("h2",{id:"tooltype"},"ToolType"),(0,i.kt)("p",null,"ToolType is an Enum, it is used to select tools easily, this approach might change in the future, but for now, it is that way."),(0,i.kt)("p",null,"We need to add our SinglePixelTool to the ",(0,i.kt)("inlineCode",{parentName:"p"},"ToolType"),". Open ToolType script and append ",(0,i.kt)("inlineCode",{parentName:"p"},"SinglePixelPen")," to the end."),(0,i.kt)("p",null,"The script should look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"namespace PixiEditor.Models.Tools\n{\n    public enum ToolType\n    {\n        None,\n        Move,\n        Pen,\n        Select,\n        ...\n        SinglePixel\n    }\n}\n")),(0,i.kt)("p",null,"Now we can set it in our ",(0,i.kt)("inlineCode",{parentName:"p"},"SinglePixelTool.cs")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public override ToolType ToolType => ToolType.SinglePixel; \n")),(0,i.kt)("h2",{id:"building-use-logic"},"Building Use logic"),(0,i.kt)("p",null,"Now we are ready to write actual tool code."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"Use(Layer layer, Coordinates[] mouseMove, Color color)\n")),(0,i.kt)("p",null,"is a method that is executed for every ",(0,i.kt)("inlineCode",{parentName:"p"},"BitmapOperationTool"),". All logic should be placed here."),(0,i.kt)("h3",{id:"layer"},"layer"),(0,i.kt)("p",null,"This argument is a Layer that was selected as active while drawing. It ",(0,i.kt)("strong",{parentName:"p"},"should")," be used only to read values, not write them directly. Some tools might require a lot of processing power, in this case, you ",(0,i.kt)("em",{parentName:"p"},"can")," Set pixels directly, but be aware, that you will need to write Undo logic yourself."),(0,i.kt)("h3",{id:"mousemove"},"mouseMove"),(0,i.kt)("p",null,"This argument contains an array of mouse positions since mouse click. So latest mouse positon is ",(0,i.kt)("inlineCode",{parentName:"p"},"mouseMove[0]")," and start (click) is ",(0,i.kt)("inlineCode",{parentName:"p"},"mouseMove[mouseMove.Length - 1]"),", or as I like it more ",(0,i.kt)("inlineCode",{parentName:"p"},"mouseMove[^1]"),"."),(0,i.kt)("h3",{id:"color"},"color"),(0,i.kt)("p",null,"This argument is a color that is used while drawing (Primary Color)."),(0,i.kt)("h2",{id:"implementation"},"Implementation"),(0,i.kt)("p",null,"We want to draw a ",(0,i.kt)("em",{parentName:"p"},"single")," pixel on a position where the user clicked (is holding mouse). So we need to take the recent mouse position and color and return the change there."),(0,i.kt)("p",null,"Our code will look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"using PixiEditor.Models.DataHolders;\nusing PixiEditor.Models.Layers;\nusing PixiEditor.Models.Position;\nusing System;\nusing System.Windows.Media;\n\nnamespace PixiEditor.Models.Tools.Tools\n{\n     public class SinglePixelTool : BitmapOperationTool\n    {\n        public override ToolType ToolType => ToolType.SinglePixel;\n\n        public override LayerChange[] Use(Layer layer, Coordinates[] mouseMove, Color color)\n        {\n            Coordinates latestPosition = mouseMove[0];\n            return Only(GetPixelChange(latestPosition, color), layer);\n        }\n\n        public BitmapPixelChanges GetPixelChange(Coordinates mouseClick, Color color)\n        {\n            Coordinates[] changedPositions = new[] { mouseClick }; // We need to return array, but changed pixel is only the mouseClick.\n            return BitmapPixelChanges.FromSingleColoredArray(changedPositions, color);\n        }\n    }\n}\n\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Only")," is a nice wrapper for LayerChange[], if we are only changing a single layer. It looks like this"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"return new[] { new LayerChange(changes, layerIndex) };\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"BitmapPixelChanges.FromSingleColoredArray")," returns a BitmapPixelChanges that are single-colored. This class is used to store changed pixels."),(0,i.kt)("h1",{id:"adding-the-tool-to-the-editor"},"Adding the tool to the editor"),(0,i.kt)("p",null,"Our tool is ready, now it's the time to add it to the editor."),(0,i.kt)("p",null,"Go to ",(0,i.kt)("inlineCode",{parentName:"p"},"ViewModels/ViewModelMain")," and in the class constructor, under ",(0,i.kt)("inlineCode",{parentName:"p"},"ToolSet")," add a ",(0,i.kt)("inlineCode",{parentName:"p"},"new SinglePixelTool()"),"."),(0,i.kt)("p",null,"Now it should look like this: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"ToolSet = new ObservableCollection<Tool>\n            {\n                new MoveTool(), new PenTool(), new SelectTool(), ... new SinglePixelTool()\n            };\n")),(0,i.kt)("p",null,"Awesome, we are almost ready!"),(0,i.kt)("p",null,"Everything is set up when you run the program the tool is will be there, but invisible! You can click under the last tool you can see, and you'll select the SinglePixelPen tool."),(0,i.kt)("h1",{id:"adding-the-image"},"Adding the image"),(0,i.kt)("p",null,"Adding a tool image is super easy. The only thing you need to do is to create an image with name format: ",(0,i.kt)("inlineCode",{parentName:"p"},"{ToolTypeName}Image.png")," For example ",(0,i.kt)("inlineCode",{parentName:"p"},"PenImage.png"),", so image for SinglePixelTool should be named ",(0,i.kt)("inlineCode",{parentName:"p"},"SinglePixelImage.png"),", copy it to ",(0,i.kt)("inlineCode",{parentName:"p"},"Images\\")," and mark it as a resource in properties."),(0,i.kt)("p",null,"If you still don't see the image, go to ",(0,i.kt)("inlineCode",{parentName:"p"},"Build -> Rebuild solution")),(0,i.kt)("h1",{id:"conclusion"},"Conclusion"),(0,i.kt)("p",null,"Adding a tool requires a bit of work, but it's easy. There are a lot of cool features provided with Tools, I recommend checking out the source code and other tools for reference."))}c.isMDXComponent=!0}}]);