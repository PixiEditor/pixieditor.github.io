"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7963],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),u=a,m=d["".concat(s,".").concat(u)]||d[u]||h[u]||i;return n?o.createElement(m,r(r({ref:t},p),{},{components:n})):o.createElement(m,r({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:a,r[1]=l;for(var c=2;c<i;c++)r[c]=n[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7433:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>c,toc:()=>d});var o=n(7462),a=n(3366),i=(n(7294),n(3905)),r=["components"],l={id:"change-walkthrough",title:"How the pen tool works",sidebar_label:"How the pen tool works"},s="What happens when you use the pen tool",c={unversionedId:"change-walkthrough",id:"change-walkthrough",title:"How the pen tool works",description:"This is a a walkthrough of how the pen tool works internally. It should give you an idea of how various systems of PixiEditor work together.",source:"@site/../docs/ChangeWalkthrough.mdx",sourceDirName:".",slug:"/change-walkthrough",permalink:"/docs/change-walkthrough",draft:!1,tags:[],version:"current",frontMatter:{id:"change-walkthrough",title:"How the pen tool works",sidebar_label:"How the pen tool works"},sidebar:"docs",previous:{title:"PixiEditor's Core",permalink:"/docs/core-guide"},next:{title:"Toolbars",permalink:"/docs/toolbars"}},p={},d=[{value:"Viewport",id:"viewport",level:3},{value:"IoViewModel, DocumentViewModel",id:"ioviewmodel-documentviewmodel",level:3},{value:"ActionAccumulator",id:"actionaccumulator",level:3},{value:"ChangeableDocument",id:"changeabledocument",level:3},{value:"Back to GUI",id:"back-to-gui",level:3}],h={toc:d},u="wrapper";function m(e){var t=e.components,n=(0,a.Z)(e,r);return(0,i.kt)(u,(0,o.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"what-happens-when-you-use-the-pen-tool"},"What happens when you use the pen tool"),(0,i.kt)("p",null,"This is a a walkthrough of how the pen tool works internally. It should give you an idea of how various systems of PixiEditor work together."),(0,i.kt)("p",null,"Let's start from the very beginning, which is when mouse events appear in the UI."),(0,i.kt)("h3",{id:"viewport"},"Viewport"),(0,i.kt)("p",null,"When you draw on the canvas the mouse events are initially handled inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"Viewport")," user control. There, they are passed to IoViewModel by\ncalling its RelayCommands (IoViewModel has relay commands that are bound to Viewport's dependency properties in MainWindow.xaml)."),(0,i.kt)("h3",{id:"ioviewmodel-documentviewmodel"},"IoViewModel, DocumentViewModel"),(0,i.kt)("p",null,"Here the mouse input is passed to the document you are drawing in."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"IoViewModel")," filters all incoming mouse events to make sure they stay consistent. ",(0,i.kt)("inlineCode",{parentName:"p"},"IoViewModel")," then calls the mouse event handlers of ",(0,i.kt)("inlineCode",{parentName:"p"},"ToolsViewModel")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"DocumentManagerViewModel.ActiveDocument")," which is the currently selected ",(0,i.kt)("inlineCode",{parentName:"p"},"DocumentViewModel"),"."),(0,i.kt)("p",null,"ToolsViewModel initiates drawing by calling ",(0,i.kt)("inlineCode",{parentName:"p"},"DocumentManagerViewModel.ActiveDocument.UsePenTool()"),". After this call, ",(0,i.kt)("inlineCode",{parentName:"p"},"ActiveDocument")," starts using all incoming\nmouse events to control the pen."),(0,i.kt)("h3",{id:"actionaccumulator"},"ActionAccumulator"),(0,i.kt)("p",null,"Now we leave the UI layer and start to descend into ",(0,i.kt)("inlineCode",{parentName:"p"},"ChangeableDocument")," which is part of PixiEditor's Core. When UsePenTool() is called, ",(0,i.kt)("inlineCode",{parentName:"p"},"ActiveDocument"),"\ncreates a new ",(0,i.kt)("inlineCode",{parentName:"p"},"LineBasedPen_Action")," which contains all the drawing settings (color, stroke width, ...) as well as the initial position on the canvas.\nAs you draw, it creates more ",(0,i.kt)("inlineCode",{parentName:"p"},"LineBasedPen_Action"),"s with updated positions. Once you finally stop drawing, an ",(0,i.kt)("inlineCode",{parentName:"p"},"EndLineBasedPen_Action")," is created.\nAll of these actions are passed to this document's  ",(0,i.kt)("inlineCode",{parentName:"p"},"ActionAccumulator"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"ActionAccumulator")," passes all of these actions to ",(0,i.kt)("inlineCode",{parentName:"p"},"ChangeableDocument"),", which\nprocesses them asynchronously in a separate thread. Meanwhile, the UI thread goes back to processing incoming mouse events."),(0,i.kt)("h3",{id:"changeabledocument"},"ChangeableDocument"),(0,i.kt)("p",null,"The actions that ",(0,i.kt)("inlineCode",{parentName:"p"},"ChangeableDocument")," receives are used to control an instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"LineBasedPen_UpdateableChange"),". The instance is created when the first\naction is received, and the mouse positions from the following actions are used to update the change. Finally, once ",(0,i.kt)("inlineCode",{parentName:"p"},"EndLineBasedPen_Action")," is received,\nthe updateable change gets fully applied."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"LineBasedPen_UpdateableChange")," uses the ",(0,i.kt)("inlineCode",{parentName:"p"},"EnqueueLine")," method of the target ",(0,i.kt)("inlineCode",{parentName:"p"},"ChunkyImage")," to draw lines. A new line is drawn after every update. In the\nend, when the ",(0,i.kt)("inlineCode",{parentName:"p"},"Apply")," function is called, the affected chunks get saved, after which ",(0,i.kt)("inlineCode",{parentName:"p"},"CommitChanges")," is called, solidifying all the drawn lines."),(0,i.kt)("h3",{id:"back-to-gui"},"Back to GUI"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"LineBasedChange_UpdateableChange")," emits a new ",(0,i.kt)("inlineCode",{parentName:"p"},"LayerImageChunks_ChangeInfo")," on every update. This change info is passed to UI and used in ",(0,i.kt)("inlineCode",{parentName:"p"},"WriteableBitmapUpdater"),"\nto re-render the parts of the main ",(0,i.kt)("inlineCode",{parentName:"p"},"WriteableBitmap"),"s that were changed. The main canvas you see in the GUI is one of those bitmaps, so this is when you see the\nnew stroke segment that you've just drawn."))}m.isMDXComponent=!0}}]);